interface NSTextViewUninitialized<InitializedType = NSTextView> extends NSTextUninitialized<NSTextView> {
  initWithFrame_textContainer(frameRect: NSRect, container: NSTextContainer | null): InitializedType;
}

interface NSTextView extends NSText, INSColorChanging, INSMenuItemValidation, INSUserInterfaceValidations, INSTextInputClient, INSTextLayoutOrientationProvider, INSDraggingSource, INSStandardKeyBindingResponding, INSTextInput, INSAccessibilityNavigableStaticText {
  replaceTextContainer(newContainer: NSTextContainer): void;
  invalidateTextContainerOrigin(): void;
  insertText(insertString: any): void;
  setConstrainedFrameSize(desiredSize: NSSize): void;
  setAlignment_range(alignment: NSTextAlignment, range: NSRange): void;
  setBaseWritingDirection_range(writingDirection: NSWritingDirection, range: NSRange): void;
  turnOffKerning(sender: any | null): void;
  tightenKerning(sender: any | null): void;
  loosenKerning(sender: any | null): void;
  useStandardKerning(sender: any | null): void;
  turnOffLigatures(sender: any | null): void;
  useStandardLigatures(sender: any | null): void;
  useAllLigatures(sender: any | null): void;
  raiseBaseline(sender: any | null): void;
  lowerBaseline(sender: any | null): void;
  toggleTraditionalCharacterShape(sender: any | null): void;
  outline(sender: any | null): void;
  performFindPanelAction(sender: any | null): void;
  alignJustified(sender: any | null): void;
  changeColor(sender: any | null): void;
  changeAttributes(sender: any | null): void;
  changeDocumentBackgroundColor(sender: any | null): void;
  orderFrontSpacingPanel(sender: any | null): void;
  orderFrontLinkPanel(sender: any | null): void;
  orderFrontListPanel(sender: any | null): void;
  orderFrontTablePanel(sender: any | null): void;
  rulerView_didMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_didRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_didAddMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_shouldMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_shouldAddMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_willMoveMarker_toLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat): CGFloat;
  rulerView_shouldRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_willAddMarker_atLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat): CGFloat;
  rulerView_handleMouseDown(ruler: NSRulerView, event: NSEvent): void;
  setNeedsDisplayInRect_avoidAdditionalLayout(rect: NSRect, flag: boolean): void;
  drawInsertionPointInRect_color_turnedOn(rect: NSRect, color: NSColor, flag: boolean): void;
  drawViewBackgroundInRect(rect: NSRect): void;
  updateRuler(): void;
  updateFontPanel(): void;
  updateDragTypeRegistration(): void;
  selectionRangeForProposedRange_granularity(proposedCharRange: NSRange, granularity: NSSelectionGranularity): NSRange;
  clickedOnLink_atIndex(link: any, charIndex: NSUInteger): void;
  startSpeaking(sender: any | null): void;
  stopSpeaking(sender: any | null): void;
  setLayoutOrientation(orientation: NSTextLayoutOrientation): void;
  changeLayoutOrientation(sender: any | null): void;
  characterIndexForInsertionAtPoint(point: NSPoint): NSUInteger;
  performValidatedReplacementInRange_withAttributedString(range: NSRange, attributedString: NSAttributedString): boolean;
  complete(sender: any | null): void;
  completionsForPartialWordRange_indexOfSelectedItem(charRange: NSRange, index: NSInteger): NSArray<any>;
  insertCompletion_forPartialWordRange_movement_isFinal(word: NSString | string, charRange: NSRange, movement: NSInteger, flag: boolean): void;
  writeSelectionToPasteboard_type(pboard: NSPasteboard, type: NSPasteboardType): boolean;
  writeSelectionToPasteboard_types(pboard: NSPasteboard, types: NSArray<any> | any[]): boolean;
  preferredPasteboardTypeFromArray_restrictedToTypesFromArray(availableTypes: NSArray<any> | any[], allowedTypes: NSArray<any> | any[] | null): NSPasteboardType;
  readSelectionFromPasteboard_type(pboard: NSPasteboard, type: NSPasteboardType): boolean;
  readSelectionFromPasteboard(pboard: NSPasteboard): boolean;
  validRequestorForSendType_returnType(sendType: NSPasteboardType | null, returnType: NSPasteboardType | null): any;
  pasteAsPlainText(sender: any | null): void;
  pasteAsRichText(sender: any | null): void;
  dragSelectionWithEvent_offset_slideBack(event: NSEvent, mouseOffset: NSSize, slideBack: boolean): boolean;
  dragImageForSelectionWithEvent_origin(event: NSEvent, origin: NSPointPointer | null): NSImage;
  dragOperationForDraggingInfo_type(dragInfo: any, type: NSPasteboardType): NSDragOperation;
  cleanUpAfterDragOperation(): void;
  setSelectedRanges_affinity_stillSelecting(ranges: NSArray<any> | any[], affinity: NSSelectionAffinity, stillSelectingFlag: boolean): void;
  setSelectedRange_affinity_stillSelecting(charRange: NSRange, affinity: NSSelectionAffinity, stillSelectingFlag: boolean): void;
  updateInsertionPointStateAndRestartTimer(restartFlag: boolean): void;
  toggleContinuousSpellChecking(sender: any | null): void;
  toggleGrammarChecking(sender: any | null): void;
  setSpellingState_range(value: NSInteger, charRange: NSRange): void;
  shouldChangeTextInRanges_replacementStrings(affectedRanges: NSArray<any> | any[], replacementStrings: NSArray<any> | any[] | null): boolean;
  shouldChangeTextInRange_replacementString(affectedCharRange: NSRange, replacementString: NSString | string | null): boolean;
  didChangeText(): void;
  breakUndoCoalescing(): void;
  showFindIndicatorForRange(charRange: NSRange): void;
  setSelectedRange(charRange: NSRange): void;
  smartDeleteRangeForProposedRange(proposedCharRange: NSRange): NSRange;
  toggleSmartInsertDelete(sender: any | null): void;
  smartInsertForString_replacingRange_beforeString_afterString(pasteString: NSString | string, charRangeToReplace: NSRange, beforeString: MOPointer<NSString>, afterString: MOPointer<NSString>): void;
  smartInsertBeforeStringForString_replacingRange(pasteString: NSString | string, charRangeToReplace: NSRange): NSString;
  smartInsertAfterStringForString_replacingRange(pasteString: NSString | string, charRangeToReplace: NSRange): NSString;
  toggleAutomaticQuoteSubstitution(sender: any | null): void;
  toggleAutomaticLinkDetection(sender: any | null): void;
  toggleAutomaticDataDetection(sender: any | null): void;
  toggleAutomaticDashSubstitution(sender: any | null): void;
  toggleAutomaticTextReplacement(sender: any | null): void;
  toggleAutomaticSpellingCorrection(sender: any | null): void;
  checkTextInRange_types_options(range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any}): void;
  handleTextCheckingResults_forRange_types_options_orthography_wordCount(results: NSArray<any> | any[], range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any}, orthography: NSOrthography, wordCount: NSInteger): void;
  orderFrontSubstitutionsPanel(sender: any | null): void;
  checkTextInSelection(sender: any | null): void;
  checkTextInDocument(sender: any | null): void;
  toggleQuickLookPreviewPanel(sender: any | null): IBAction;
  quickLookPreviewableItemsInRanges(ranges: NSArray<any> | any[]): NSArray<any>;
  updateQuickLookPreviewPanel(): void;
  orderFrontSharingServicePicker(sender: any | null): IBAction;
  toggleAutomaticTextCompletion(sender: any | null): IBAction;
  updateTouchBarItemIdentifiers(): void;
  updateTextTouchBarItems(): void;
  updateCandidates(): void;
  toggleBaseWritingDirection(sender: any | null): void;
  changeColor(sender: NSColorPanel | null): void;
  validateMenuItem(menuItem: NSMenuItem): boolean;
  validateUserInterfaceItem(item: any): boolean;
  insertText_replacementRange(string: any, replacementRange: NSRange): void;
  doCommandBySelector(selector: string): void;
  setMarkedText_selectedRange_replacementRange(string: any, selectedRange: NSRange, replacementRange: NSRange): void;
  unmarkText(): void;
  selectedRange(): NSRange;
  markedRange(): NSRange;
  hasMarkedText(): boolean;
  attributedSubstringForProposedRange_actualRange(range: NSRange, actualRange: NSRangePointer | null): NSAttributedString;
  validAttributesForMarkedText(): NSArray<any>;
  firstRectForCharacterRange_actualRange(range: NSRange, actualRange: NSRangePointer | null): NSRect;
  characterIndexForPoint(point: NSPoint): NSUInteger;
  attributedString(): NSAttributedString;
  fractionOfDistanceThroughGlyphForPoint(point: NSPoint): CGFloat;
  baselineDeltaForCharacterAtIndex(anIndex: NSUInteger): CGFloat;
  windowLevel(): NSInteger;
  drawsVerticallyForCharacterAtIndex(charIndex: NSUInteger): boolean;
  draggingSession_sourceOperationMaskForDraggingContext(session: NSDraggingSession, context: NSDraggingContext): NSDragOperation;
  draggingSession_willBeginAtPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_movedToPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_endedAtPoint_operation(session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  ignoreModifierKeysForDraggingSession(session: NSDraggingSession): boolean;
  insertText(insertString: any): void;
  doCommandBySelector(selector: string): void;
  moveForward(sender: any | null): void;
  moveRight(sender: any | null): void;
  moveBackward(sender: any | null): void;
  moveLeft(sender: any | null): void;
  moveUp(sender: any | null): void;
  moveDown(sender: any | null): void;
  moveWordForward(sender: any | null): void;
  moveWordBackward(sender: any | null): void;
  moveToBeginningOfLine(sender: any | null): void;
  moveToEndOfLine(sender: any | null): void;
  moveToBeginningOfParagraph(sender: any | null): void;
  moveToEndOfParagraph(sender: any | null): void;
  moveToEndOfDocument(sender: any | null): void;
  moveToBeginningOfDocument(sender: any | null): void;
  pageDown(sender: any | null): void;
  pageUp(sender: any | null): void;
  centerSelectionInVisibleArea(sender: any | null): void;
  moveBackwardAndModifySelection(sender: any | null): void;
  moveForwardAndModifySelection(sender: any | null): void;
  moveWordForwardAndModifySelection(sender: any | null): void;
  moveWordBackwardAndModifySelection(sender: any | null): void;
  moveUpAndModifySelection(sender: any | null): void;
  moveDownAndModifySelection(sender: any | null): void;
  moveToBeginningOfLineAndModifySelection(sender: any | null): void;
  moveToEndOfLineAndModifySelection(sender: any | null): void;
  moveToBeginningOfParagraphAndModifySelection(sender: any | null): void;
  moveToEndOfParagraphAndModifySelection(sender: any | null): void;
  moveToEndOfDocumentAndModifySelection(sender: any | null): void;
  moveToBeginningOfDocumentAndModifySelection(sender: any | null): void;
  pageDownAndModifySelection(sender: any | null): void;
  pageUpAndModifySelection(sender: any | null): void;
  moveParagraphForwardAndModifySelection(sender: any | null): void;
  moveParagraphBackwardAndModifySelection(sender: any | null): void;
  moveWordRight(sender: any | null): void;
  moveWordLeft(sender: any | null): void;
  moveRightAndModifySelection(sender: any | null): void;
  moveLeftAndModifySelection(sender: any | null): void;
  moveWordRightAndModifySelection(sender: any | null): void;
  moveWordLeftAndModifySelection(sender: any | null): void;
  moveToLeftEndOfLine(sender: any | null): void;
  moveToRightEndOfLine(sender: any | null): void;
  moveToLeftEndOfLineAndModifySelection(sender: any | null): void;
  moveToRightEndOfLineAndModifySelection(sender: any | null): void;
  scrollPageUp(sender: any | null): void;
  scrollPageDown(sender: any | null): void;
  scrollLineUp(sender: any | null): void;
  scrollLineDown(sender: any | null): void;
  scrollToBeginningOfDocument(sender: any | null): void;
  scrollToEndOfDocument(sender: any | null): void;
  transpose(sender: any | null): void;
  transposeWords(sender: any | null): void;
  selectAll(sender: any | null): void;
  selectParagraph(sender: any | null): void;
  selectLine(sender: any | null): void;
  selectWord(sender: any | null): void;
  indent(sender: any | null): void;
  insertTab(sender: any | null): void;
  insertBacktab(sender: any | null): void;
  insertNewline(sender: any | null): void;
  insertParagraphSeparator(sender: any | null): void;
  insertNewlineIgnoringFieldEditor(sender: any | null): void;
  insertTabIgnoringFieldEditor(sender: any | null): void;
  insertLineBreak(sender: any | null): void;
  insertContainerBreak(sender: any | null): void;
  insertSingleQuoteIgnoringSubstitution(sender: any | null): void;
  insertDoubleQuoteIgnoringSubstitution(sender: any | null): void;
  changeCaseOfLetter(sender: any | null): void;
  uppercaseWord(sender: any | null): void;
  lowercaseWord(sender: any | null): void;
  capitalizeWord(sender: any | null): void;
  deleteForward(sender: any | null): void;
  deleteBackward(sender: any | null): void;
  deleteBackwardByDecomposingPreviousCharacter(sender: any | null): void;
  deleteWordForward(sender: any | null): void;
  deleteWordBackward(sender: any | null): void;
  deleteToBeginningOfLine(sender: any | null): void;
  deleteToEndOfLine(sender: any | null): void;
  deleteToBeginningOfParagraph(sender: any | null): void;
  deleteToEndOfParagraph(sender: any | null): void;
  yank(sender: any | null): void;
  complete(sender: any | null): void;
  setMark(sender: any | null): void;
  deleteToMark(sender: any | null): void;
  selectToMark(sender: any | null): void;
  swapWithMark(sender: any | null): void;
  cancelOperation(sender: any | null): void;
  makeBaseWritingDirectionNatural(sender: any | null): void;
  makeBaseWritingDirectionLeftToRight(sender: any | null): void;
  makeBaseWritingDirectionRightToLeft(sender: any | null): void;
  makeTextWritingDirectionNatural(sender: any | null): void;
  makeTextWritingDirectionLeftToRight(sender: any | null): void;
  makeTextWritingDirectionRightToLeft(sender: any | null): void;
  quickLookPreviewItems(sender: any | null): void;
  insertText(string: any): void;
  doCommandBySelector(selector: string): void;
  setMarkedText_selectedRange(string: any, selRange: NSRange): void;
  unmarkText(): void;
  hasMarkedText(): boolean;
  conversationIdentifier(): NSInteger;
  attributedSubstringFromRange(range: NSRange): NSAttributedString;
  markedRange(): NSRange;
  selectedRange(): NSRange;
  firstRectForCharacterRange(range: NSRange): NSRect;
  characterIndexForPoint(point: NSPoint): NSUInteger;
  validAttributesForMarkedText(): NSArray<any>;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityRangeForLine(lineNumber: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;

  textContainer(): NSTextContainer;
  setTextContainer(textContainer: NSTextContainer): void;
  textContainerInset(): NSSize;
  setTextContainerInset(textContainerInset: NSSize): void;
  textContainerOrigin(): NSPoint;
  layoutManager(): NSLayoutManager;
  textStorage(): NSTextStorage;
  shouldDrawInsertionPoint(): boolean;
  rangeForUserCompletion(): NSRange;
  writablePasteboardTypes(): NSArray<any>;
  readablePasteboardTypes(): NSArray<any>;
  acceptableDragTypes(): NSArray<any>;
  selectedRanges(): NSArray<any>;
  setSelectedRanges(selectedRanges: NSArray<any> | any[]): void;
  selectionAffinity(): NSSelectionAffinity;
  selectionGranularity(): NSSelectionGranularity;
  setSelectionGranularity(selectionGranularity: NSSelectionGranularity): void;
  selectedTextAttributes(): NSDictionary<any, any>;
  setSelectedTextAttributes(selectedTextAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  insertionPointColor(): NSColor;
  setInsertionPointColor(insertionPointColor: NSColor): void;
  markedTextAttributes(): NSDictionary<any, any>;
  setMarkedTextAttributes(markedTextAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  linkTextAttributes(): NSDictionary<any, any>;
  setLinkTextAttributes(linkTextAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  displaysLinkToolTips(): boolean;
  setDisplaysLinkToolTips(displaysLinkToolTips: boolean): void;
  acceptsGlyphInfo(): boolean;
  setAcceptsGlyphInfo(acceptsGlyphInfo: boolean): void;
  usesRuler(): boolean;
  setUsesRuler(usesRuler: boolean): void;
  usesInspectorBar(): boolean;
  setUsesInspectorBar(usesInspectorBar: boolean): void;
  continuousSpellCheckingEnabled(): boolean;
  setContinuousSpellCheckingEnabled(continuousSpellCheckingEnabled: boolean): void;
  spellCheckerDocumentTag(): NSInteger;
  grammarCheckingEnabled(): boolean;
  setGrammarCheckingEnabled(grammarCheckingEnabled: boolean): void;
  typingAttributes(): NSDictionary<any, any>;
  setTypingAttributes(typingAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  rangesForUserTextChange(): NSArray<any>;
  rangesForUserCharacterAttributeChange(): NSArray<any>;
  rangesForUserParagraphAttributeChange(): NSArray<any>;
  rangeForUserTextChange(): NSRange;
  rangeForUserCharacterAttributeChange(): NSRange;
  rangeForUserParagraphAttributeChange(): NSRange;
  allowsDocumentBackgroundColorChange(): boolean;
  setAllowsDocumentBackgroundColorChange(allowsDocumentBackgroundColorChange: boolean): void;
  defaultParagraphStyle(): NSParagraphStyle;
  setDefaultParagraphStyle(defaultParagraphStyle: NSParagraphStyle): void;
  allowsUndo(): boolean;
  setAllowsUndo(allowsUndo: boolean): void;
  coalescingUndo(): boolean;
  allowsImageEditing(): boolean;
  setAllowsImageEditing(allowsImageEditing: boolean): void;
  usesRolloverButtonForSelection(): boolean;
  setUsesRolloverButtonForSelection(usesRolloverButtonForSelection: boolean): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  selectable(): boolean;
  setSelectable(selectable: boolean): void;
  richText(): boolean;
  setRichText(richText: boolean): void;
  importsGraphics(): boolean;
  setImportsGraphics(importsGraphics: boolean): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  fieldEditor(): boolean;
  setFieldEditor(fieldEditor: boolean): void;
  usesFontPanel(): boolean;
  setUsesFontPanel(usesFontPanel: boolean): void;
  rulerVisible(): boolean;
  setRulerVisible(rulerVisible: boolean): void;
  allowedInputSourceLocales(): NSArray<any>;
  setAllowedInputSourceLocales(allowedInputSourceLocales: NSArray<any> | any[]): void;
  smartInsertDeleteEnabled(): boolean;
  setSmartInsertDeleteEnabled(smartInsertDeleteEnabled: boolean): void;
  automaticQuoteSubstitutionEnabled(): boolean;
  setAutomaticQuoteSubstitutionEnabled(automaticQuoteSubstitutionEnabled: boolean): void;
  automaticLinkDetectionEnabled(): boolean;
  setAutomaticLinkDetectionEnabled(automaticLinkDetectionEnabled: boolean): void;
  automaticDataDetectionEnabled(): boolean;
  setAutomaticDataDetectionEnabled(automaticDataDetectionEnabled: boolean): void;
  automaticDashSubstitutionEnabled(): boolean;
  setAutomaticDashSubstitutionEnabled(automaticDashSubstitutionEnabled: boolean): void;
  automaticTextReplacementEnabled(): boolean;
  setAutomaticTextReplacementEnabled(automaticTextReplacementEnabled: boolean): void;
  automaticSpellingCorrectionEnabled(): boolean;
  setAutomaticSpellingCorrectionEnabled(automaticSpellingCorrectionEnabled: boolean): void;
  enabledTextCheckingTypes(): NSTextCheckingTypes;
  setEnabledTextCheckingTypes(enabledTextCheckingTypes: NSTextCheckingTypes): void;
  usesFindPanel(): boolean;
  setUsesFindPanel(usesFindPanel: boolean): void;
  usesFindBar(): boolean;
  setUsesFindBar(usesFindBar: boolean): void;
  incrementalSearchingEnabled(): boolean;
  setIncrementalSearchingEnabled(incrementalSearchingEnabled: boolean): void;
  automaticTextCompletionEnabled(): boolean;
  setAutomaticTextCompletionEnabled(automaticTextCompletionEnabled: boolean): void;
  allowsCharacterPickerTouchBarItem(): boolean;
  setAllowsCharacterPickerTouchBarItem(allowsCharacterPickerTouchBarItem: boolean): void;
  candidateListTouchBarItem(): NSCandidateListTouchBarItem<any>;
}

declare const NSTextView: {
  alloc(): NSTextViewUninitialized;
  class(): NSTextView;
  registerForServices(): void;
  scrollableTextView(): NSScrollView;
  fieldEditor(): NSTextView;
  scrollableDocumentContentTextView(): NSScrollView;
  scrollablePlainDocumentContentTextView(): NSScrollView;
  stronglyReferencesTextStorage(): boolean;
  requiresConstraintBasedLayout(): boolean;
  focusView(): NSView;
  defaultMenu(): NSMenu;
  compatibleWithResponsiveScrolling(): boolean;
  defaultFocusRingType(): NSFocusRingType;
  restorableStateKeyPaths(): NSArray<any>;

}

