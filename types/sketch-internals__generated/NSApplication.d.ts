interface NSApplicationUninitialized<InitializedType = NSApplication> extends NSResponderUninitialized<NSApplication> {}
interface NSApplication extends NSResponder, INSUserInterfaceValidations, INSMenuItemValidation, INSAccessibilityElement, INSAccessibility {
  hide(sender: any | null): void;
  unhide(sender: any | null): void;
  unhideWithoutActivation(): void;
  windowWithWindowNumber(windowNum: NSInteger): NSWindow;
  deactivate(): void;
  activateIgnoringOtherApps(flag: boolean): void;
  hideOtherApplications(sender: any | null): void;
  unhideAllApplications(sender: any | null): void;
  finishLaunching(): void;
  run(): void;
  runModalForWindow(window: NSWindow): NSModalResponse;
  stop(sender: any | null): void;
  stopModal(): void;
  stopModalWithCode(returnCode: NSModalResponse): void;
  abortModal(): void;
  beginModalSessionForWindow(window: NSWindow): NSModalSession;
  runModalSession(session: NSModalSession): NSModalResponse;
  endModalSession(session: NSModalSession): void;
  terminate(sender: any | null): void;
  requestUserAttention(requestType: NSRequestUserAttentionType): NSInteger;
  cancelUserAttentionRequest(request: NSInteger): void;
  enumerateWindowsWithOptions_usingBlock(options: NSWindowListOptions, block: Block): void;
  preventWindowOrdering(): void;
  setWindowsNeedUpdate(needUpdate: boolean): void;
  updateWindows(): void;
  activationPolicy(): NSApplicationActivationPolicy;
  setActivationPolicy(activationPolicy: NSApplicationActivationPolicy): boolean;
  reportException(exception: NSException | Error): void;
  replyToApplicationShouldTerminate(shouldTerminate: boolean): void;
  replyToOpenOrPrint(reply: NSApplicationDelegateReply): void;
  orderFrontCharacterPalette(sender: any | null): void;
  sendEvent(event: NSEvent): void;
  postEvent_atStart(event: NSEvent, flag: boolean): void;
  nextEventMatchingMask_untilDate_inMode_dequeue(mask: NSUInteger, expiration: NSDate | null, mode: NSRunLoopMode, deqFlag: boolean): NSEvent;
  discardEventsMatchingMask_beforeEvent(mask: NSUInteger, lastEvent: NSEvent | null): void;
  sendAction_to_from(action: string, target: any | null, sender: any | null): boolean;
  targetForAction(action: string): any;
  targetForAction_to_from(action: string, target: any | null, sender: any | null): any;
  tryToPerform_with(action: string, object: any | null): boolean;
  validRequestorForSendType_returnType(sendType: NSPasteboardType | null, returnType: NSPasteboardType | null): any;
  arrangeInFront(sender: any | null): void;
  removeWindowsItem(win: NSWindow): void;
  addWindowsItem_title_filename(win: NSWindow, string: NSString | string, isFilename: boolean): void;
  changeWindowsItem_title_filename(win: NSWindow, string: NSString | string, isFilename: boolean): void;
  updateWindowsItem(win: NSWindow): void;
  miniaturizeAll(sender: any | null): void;
  registerServicesMenuSendTypes_returnTypes(sendTypes: NSArray<any> | any[], returnTypes: NSArray<any> | any[]): void;
  orderFrontStandardAboutPanel(sender: any | null): void;
  orderFrontStandardAboutPanelWithOptions(optionsDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  disableRelaunchOnLogin(): void;
  enableRelaunchOnLogin(): void;
  registerForRemoteNotifications(): void;
  unregisterForRemoteNotifications(): void;
  registerForRemoteNotificationTypes(types: NSRemoteNotificationType): void;
  runModalForWindow_relativeToWindow(window: NSWindow, docWindow: NSWindow): NSInteger;
  beginModalSessionForWindow_relativeToWindow(window: NSWindow, docWindow: NSWindow): NSModalSession;
  application_printFiles(sender: NSApplication, filenames: NSArray<any> | any[]): void;
  beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo(sheet: NSWindow, docWindow: NSWindow, modalDelegate: any | null, didEndSelector: string | null, contextInfo: void): void;
  endSheet(sheet: NSWindow): void;
  endSheet_returnCode(sheet: NSWindow, returnCode: NSInteger): void;
  makeWindowsPerform_inOrder(selector: string, flag: boolean): NSWindow;
  orderFrontColorPanel(sender: any | null): void;
  activateContextHelpMode(sender: any | null): void;
  showHelp(sender: any | null): void;
  runPageLayout(sender: any | null): void;
  toggleTouchBarCustomizationPalette(sender: any | null): IBAction;
  registerUserInterfaceItemSearchHandler(handler: any): void;
  unregisterUserInterfaceItemSearchHandler(handler: any): void;
  searchString_inUserInterfaceItemString_searchRange_foundRange(searchString: NSString | string, stringToSearch: NSString | string, searchRange: NSRange, foundRange: NSRange | null): boolean;
  restoreWindowWithIdentifier_state_completionHandler(identifier: NSUserInterfaceItemIdentifier, state: NSCoder, completionHandler: Block): boolean;
  extendStateRestoration(): void;
  completeStateRestoration(): void;
  applicationName(): NSString;
  applicationVersion(): NSString;
  applicationBuild(): NSString;
  isActiveApplication(): boolean;
  open(pathToFile: NSString | string): any;

  delegate(): any;
  setDelegate(delegate: any): void;
  mainWindow(): NSWindow;
  keyWindow(): NSWindow;
  active(): boolean;
  hidden(): boolean;
  running(): boolean;
  modalWindow(): NSWindow;
  windows(): NSArray<any>;
  mainMenu(): NSMenu;
  setMainMenu(mainMenu: NSMenu): void;
  helpMenu(): NSMenu;
  setHelpMenu(helpMenu: NSMenu): void;
  applicationIconImage(): NSImage;
  setApplicationIconImage(applicationIconImage: NSImage): void;
  dockTile(): NSDockTile;
  presentationOptions(): NSApplicationPresentationOptions;
  setPresentationOptions(presentationOptions: NSApplicationPresentationOptions): void;
  currentSystemPresentationOptions(): NSApplicationPresentationOptions;
  occlusionState(): NSApplicationOcclusionState;
  appearance(): NSAppearance;
  setAppearance(appearance: NSAppearance): void;
  effectiveAppearance(): NSAppearance;
  currentEvent(): NSEvent;
  windowsMenu(): NSMenu;
  setWindowsMenu(windowsMenu: NSMenu): void;
  fullKeyboardAccessEnabled(): boolean;
  servicesMenu(): NSMenu;
  setServicesMenu(servicesMenu: NSMenu): void;
  servicesProvider(): any;
  setServicesProvider(servicesProvider: any): void;
  userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
  registeredForRemoteNotifications(): boolean;
  enabledRemoteNotificationTypes(): NSRemoteNotificationType;
  context(): NSGraphicsContext;
  orderedDocuments(): NSArray<any>;
  orderedWindows(): NSArray<any>;
  automaticCustomizeTouchBarMenuItemEnabled(): boolean;
  setAutomaticCustomizeTouchBarMenuItemEnabled(automaticCustomizeTouchBarMenuItemEnabled: boolean): void;
}
declare const NSApplication: {
  alloc(): NSApplicationUninitialized;
  class(): NSApplication;  detachDrawingThread_toTarget_withObject(selector: string, target: any, argument: any | null): void;

  sharedApplication(): NSApplication;

}

