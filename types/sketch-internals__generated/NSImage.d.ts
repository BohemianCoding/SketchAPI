interface NSImageUninitialized<InitializedType = NSImage> extends NSObjectUninitialized<NSImage> {
  initWithSize(size: NSSize): InitializedType;
  initWithCoder(coder: NSCoder): InitializedType;
  initWithData(data: NSData): InitializedType;
  initWithContentsOfFile(fileName: NSString | string): InitializedType;
  initWithContentsOfURL(url: NSURL): InitializedType;
  initByReferencingFile(fileName: NSString | string): InitializedType;
  initByReferencingURL(url: NSURL): InitializedType;
  initWithIconRef(iconRef: IconRef): InitializedType;
  initWithPasteboard(pasteboard: NSPasteboard): InitializedType;
  initWithDataIgnoringOrientation(data: NSData): InitializedType;
  initWithCGImage_size(cgImage: CGImageRef, size: NSSize): InitializedType;
  initWithPasteboardPropertyList_ofType(propertyList: any, type: NSPasteboardType): InitializedType;
}

interface NSImage extends NSObject, INSCopying, INSSecureCoding, INSPasteboardReading, INSPasteboardWriting {
  setName(string: NSImageName | null): boolean;
  name(): NSImageName;
  drawAtPoint_fromRect_operation_fraction(point: NSPoint, fromRect: NSRect, op: NSCompositingOperation, delta: CGFloat): void;
  drawInRect_fromRect_operation_fraction(rect: NSRect, fromRect: NSRect, op: NSCompositingOperation, delta: CGFloat): void;
  drawInRect_fromRect_operation_fraction_respectFlipped_hints(dstSpacePortionRect: NSRect, srcSpacePortionRect: NSRect, op: NSCompositingOperation, requestedAlpha: CGFloat, respectContextIsFlipped: boolean, hints: NSDictionary<any, any> | {[key: string]: any} | null): void;
  drawRepresentation_inRect(imageRep: NSImageRep, rect: NSRect): boolean;
  drawInRect(rect: NSRect): void;
  recache(): void;
  TIFFRepresentationUsingCompression_factor(comp: NSTIFFCompression, factor: number): NSData;
  addRepresentations(imageReps: NSArray<any> | any[]): void;
  addRepresentation(imageRep: NSImageRep): void;
  removeRepresentation(imageRep: NSImageRep): void;
  lockFocus(): void;
  lockFocusFlipped(flipped: boolean): void;
  unlockFocus(): void;
  bestRepresentationForDevice(deviceDescription: NSDictionary<any, any> | {[key: string]: any}): NSImageRep;
  cancelIncrementalLoad(): void;
  isTemplate(): boolean;
  setTemplate(isTemplate: boolean): void;
  CGImageForProposedRect_context_hints_CF_RETURNS_NOT_RETAINED(proposedDestRect: NSRect | null, referenceContext: NSGraphicsContext | null, hints: NSDictionary<any, any> | {[key: string]: any} | null): CGImageRef;
  bestRepresentationForRect_context_hints(rect: NSRect, referenceContext: NSGraphicsContext | null, hints: NSDictionary<any, any> | {[key: string]: any} | null): NSImageRep;
  hitTestRect_withImageDestinationRect_context_hints_flipped(testRectDestSpace: NSRect, imageRectDestSpace: NSRect, context: NSGraphicsContext | null, hints: NSDictionary<any, any> | {[key: string]: any} | null, flipped: boolean): boolean;
  recommendedLayerContentsScale(preferredContentsScale: CGFloat): CGFloat;
  layerContentsForContentsScale(layerContentsScale: CGFloat): any;
  setFlipped(flag: boolean): void;
  isFlipped(): boolean;
  dissolveToPoint_fraction(point: NSPoint, fraction: CGFloat): void;
  dissolveToPoint_fromRect_fraction(point: NSPoint, rect: NSRect, fraction: CGFloat): void;
  compositeToPoint_operation(point: NSPoint, op: NSCompositingOperation): void;
  compositeToPoint_fromRect_operation(point: NSPoint, rect: NSRect, op: NSCompositingOperation): void;
  compositeToPoint_operation_fraction(point: NSPoint, op: NSCompositingOperation, delta: CGFloat): void;
  compositeToPoint_fromRect_operation_fraction(point: NSPoint, rect: NSRect, op: NSCompositingOperation, delta: CGFloat): void;
  lockFocusOnRepresentation(imageRepresentation: NSImageRep): void;
  setScalesWhenResized(flag: boolean): void;
  scalesWhenResized(): boolean;
  setDataRetained(flag: boolean): void;
  isDataRetained(): boolean;
  setCachedSeparately(flag: boolean): void;
  isCachedSeparately(): boolean;
  setCacheDepthMatchesImageDepth(flag: boolean): void;
  cacheDepthMatchesImageDepth(): boolean;
  badgedAs_forImageOwner(badgeType: MSLayerPreviewBadgeType, owner: any): NSImage;
  badgedWithImage_maskImage_offset_forImageOwner(badgeImage: NSImage, maskImage: NSImage, offset: NSPoint, owner: any): NSImage;
  badgedWithImageNamed_maskImageNamed_offset_forImageOwner(badgeName: NSString | string, badgeMaskName: NSString | string, offset: NSPoint, owner: any): NSImage;
  tintedAsUnselectedForImageOwner(owner: any): NSImage;
  tintedAsUnselectedForImageOwner_isSharedObject(owner: any, isShared: boolean): NSImage;
  tintedAsSelectedForImageOwner_inActiveWindow(owner: any, active: boolean): NSImage;
  drawAtPoint(point: NSPoint): void;
  drawAtPoint_fraction(point: NSPoint, delta: CGFloat): void;
  scaledImageToSize(aSize: NSSize): any;
  drawProportionallyInRect_operation_fraction(rect: NSRect, op: NSCompositingOperation, frac: CGFloat): void;
  drawInRect_fraction(rect: NSRect, delta: CGFloat): void;
  selectedImage(): NSImage;
  hoverImage(): NSImage;
  pressedImage(): NSImage;
  altImage(): NSImage;
  highlightImage(): NSImage;
  drawFlippedAtPoint(point: NSPoint): void;
  drawFlippedAtPoint_fraction(point: NSPoint, fraction: CGFloat): void;
  firstBitmapImageRepOrCreateIfNecessary(): NSBitmapImageRep;
  firstBitmapImageRepOrCreateIfNecessaryPreservingPixelSize(preservePixelSize: boolean): NSBitmapImageRep;
  firstBitmapImageRep(): NSBitmapImageRep;
  firstCGImageRep(): NSImageRep;
  firstBitmapImageRepOfScale(scale: CGFloat): NSBitmapImageRep;
  bitSafeBitmapImageRep(): NSBitmapImageRep;
  drawInRect_fromRect_fraction_respectFlipped_colorSpace(inRect: NSRect, fromRect: NSRect, fraction: CGFloat, isFlipped: boolean, space: NSColorSpace): void;
  isVectorImage(): boolean;
  imageWithPadding(padding: NSUInteger): NSImage;
  isImageSizeLargerThan(targetSize: NSSize): boolean;
  pixelSize(): NSSize;
  imageWithShadow_padding(shadow: NSShadow, padding: NSUInteger): NSImage;
  thumbWithSize_cornerRadius(size: NSSize, cornerRadius: CGFloat): NSImage;
  filledThumbWithSize_cornerRadius(size: NSSize, cornerRadius: CGFloat): NSImage;
  tintedWithColor(color: NSColor): NSImage;
  tintedWithColor_compositingOperation(color: NSColor, op: NSCompositingOperation): NSImage;
  tintedWithColor_forImageOwner(color: NSColor, imageOwner: any): NSImage;
  horizontallyFlipped(): NSImage;
  verticallyFlipped(): NSImage;
  imageHasAlpha(): boolean;
  dataForArchiving(): NSData;
  hasPDFData(): boolean;
  PDFImageRep(): NSPDFImageRep;
  hasEPSData(): boolean;
  EPSImageRep(): NSEPSImageRep;
  bitmapData(): NSData;
  copyWithZone(zone: NSZone | null): any;
  writableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  writingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardWritingOptions;
  pasteboardPropertyListForType(type: NSPasteboardType): any;

  size(): NSSize;
  setSize(size: NSSize): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  usesEPSOnResolutionMismatch(): boolean;
  setUsesEPSOnResolutionMismatch(usesEPSOnResolutionMismatch: boolean): void;
  prefersColorMatch(): boolean;
  setPrefersColorMatch(prefersColorMatch: boolean): void;
  matchesOnMultipleResolution(): boolean;
  setMatchesOnMultipleResolution(matchesOnMultipleResolution: boolean): void;
  matchesOnlyOnBestFittingAxis(): boolean;
  setMatchesOnlyOnBestFittingAxis(matchesOnlyOnBestFittingAxis: boolean): void;
  TIFFRepresentation(): NSData;
  representations(): NSArray<any>;
  valid(): boolean;
  delegate(): any;
  setDelegate(delegate: any): void;
  cacheMode(): NSImageCacheMode;
  setCacheMode(cacheMode: NSImageCacheMode): void;
  alignmentRect(): NSRect;
  setAlignmentRect(alignmentRect: NSRect): void;
  template(): boolean;
  setTemplate(template: boolean): void;
  accessibilityDescription(): NSString;
  setAccessibilityDescription(accessibilityDescription: NSString | string): void;
  capInsets(): NSEdgeInsets;
  setCapInsets(capInsets: NSEdgeInsets): void;
  resizingMode(): NSImageResizingMode;
  setResizingMode(resizingMode: NSImageResizingMode): void;
  embeddedXlinkValue(): NSString;
}

declare const NSImage: {
  alloc(): NSImageUninitialized;
  class(): NSImage;
  imageNamed(name: NSImageName): NSImage;
  imageWithSize_flipped_drawingHandler(size: NSSize, drawingHandlerShouldBeCalledWithFlippedContext: boolean, drawingHandler: Block): NSImage;
  imageUnfilteredFileTypes(): NSArray<any>;
  imageUnfilteredPasteboardTypes(): NSArray<any>;
  imageFileTypes(): NSArray<any>;
  imagePasteboardTypes(): NSArray<any>;
  canInitWithPasteboard(pasteboard: NSPasteboard): boolean;
  PDFImageWithSize_flipped_drawingHandler(size: NSSize, drawingHandlerShouldBeCalledWithFlippedContext: boolean, drawingHandler: Block): NSImage;
  pngDataByFixingInvalidGamma(data: NSData): NSData;
  localizedBundledImageNamed(imageName: NSString | string): NSImage;
  localizedImageNamed(imageName: NSString | string): NSImage;
  localizedImageName(imageName: NSString | string): NSString;
  bundledImageNamed(imageName: NSString | string): NSImage;
  drawImageWithSize_withBlock(aSize: NSSize, aBlock: BCVoidBlock): NSImage;
  drawImageFlippedWithSize_withBlock(aSize: NSSize, aBlock: BCVoidBlock): NSImage;
  drawImageFlipped_withSize_withBlock(shouldFlip: boolean, aSize: NSSize, aBlock: BCVoidBlock): NSImage;
  imageFromDataArchive(data: NSData): NSImage;
  readableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  readingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardReadingOptions;
  load(): void;
  instancesRespondToSelector(aSelector: string): boolean;
  conformsToProtocol(protocol: Protocol): boolean;
  instanceMethodForSelector(aSelector: string): IMP;
  isSubclassOfClass(aClass: any): boolean;
  hash(): NSUInteger;
  superclass(): any;
  description(): NSString;
  debugDescription(): NSString;
  useStoredAccessor(): boolean;
  keyPathsForValuesAffectingValueForKey(key: NSString | string): NSSet<any>;
  automaticallyNotifiesObserversForKey(key: NSString | string): boolean;
  setKeys_triggerChangeNotificationsForDependentKey(keys: NSArray<any> | any[], dependentKey: NSString | string): void;
  classFallbacksForKeyedArchiver(): NSArray<any>;
  classForKeyedUnarchiver(): any;
  version(): NSInteger;
  setVersion(aVersion: NSInteger): void;
  cancelPreviousPerformRequestsWithTarget_selector_object(aTarget: any, aSelector: string, anArgument: any | null): void;
  cancelPreviousPerformRequestsWithTarget(aTarget: any): void;
  exposeBinding(binding: NSBindingName): void;
  setDefaultPlaceholder_forMarker_withBinding(placeholder: any | null, marker: any | null, binding: NSBindingName): void;
  defaultPlaceholderForMarker_withBinding(marker: any | null, binding: NSBindingName): any;
  mo_swizzleAdditions(): void;
  mo_mocha(): MOClassDescription;
  isSelectorExcludedFromMochaScript(selector: string): boolean;
  selectorForMochaPropertyName(propertyName: NSString | string): string;
  imageTypes(): NSArray<any>;
  imageUnfilteredTypes(): NSArray<any>;
  supportsSecureCoding(): boolean;
  accessInstanceVariablesDirectly(): boolean;

}

