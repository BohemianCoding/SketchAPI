interface MSThemeUninitialized<InitializedType = MSTheme> extends NSObjectUninitialized<MSTheme> {}

interface MSTheme extends NSObject {
  layerListSelectionColorForWindow_isActiveOutlineView(window: NSWindow | null, isActive: boolean): NSColor;
  layerListSymbolOverrideSelectionColorForWindow_isActiveOutlineView(window: NSWindow | null, isActive: boolean): NSColor;
  layerListTextColorForBackgroundStyle_nodeIsHidden_editing_selected_active(style: NSBackgroundStyle, hidden: boolean, editing: boolean, selected: boolean, active: boolean): NSColor;
  validate(): void;
  colorNamed(colorName: NSColorName): NSColor;
  colorNamed_options(colorName: NSColorName, options: MSThemeResolvingOptions): NSColor;
  imageNamed(imageName: NSString | string): NSImage;
  imageNamed_options(imageName: NSString | string, options: MSThemeResolvingOptions): NSImage;
  localizedImageNamed(name: NSString | string): NSImage;
  localizedImageNamed_options(baseImageName: NSString | string, options: MSThemeResolvingOptions): NSImage;
  cacheImage_forKey_imageOwner(image: NSImage, key: NSString | string, owner: any): void;
  cachedImageForKey_imageOwner(key: NSString | string, owner: any): NSImage;
  cachedImageForKey_imageOwner_createBlock(key: NSString | string, owner: any, block: BCCacheCreateObjectBlock): NSImage;
  changeApplicationAppearanceInBlock(block: BCVoidBlock): void;
  colorForResolvedName(name: NSString | string): NSColor;
  attributedStringWithString_color_controlSize(string: NSString | string, color: NSColor, controlSize: NSControlSize): NSAttributedString;

  inspectorAccentColor(): NSColor;
  inspectorAccentedIconColor(): NSColor;
  inspectorHighlightedAccentedIconColor(): NSColor;
  inspectorAccentedColorModePickerIconColor(): NSColor;
  inspectorHighlightedAccentedColorModePickerIconColor(): NSColor;
  inspectorAlignmentDisabledStrutColor(): NSColor;
  inspectorAlignmentStrutColor(): NSColor;
  inspectorAlignmentActiveStrutColor(): NSColor;
  inspectorAlignmentHighlightedActiveStrutColor(): NSColor;
  inspectorAlignmentViewBackgroundColor(): NSColor;
  inspectorBackgroundColor(): NSColor;
  inspectorBorderColor(): NSColor;
  inspectorBorderDisabledColor(): NSColor;
  inspectorButtonBackgroundColor(): NSColor;
  inspectorButtonDropShadowColor(): NSColor;
  inspectorButtonHighlightedBackgroundColor(): NSColor;
  inspectorDisabledIconColor(): NSColor;
  inspectorHighlightedAccentColor(): NSColor;
  inspectorHighlightedBorderColor(): NSColor;
  inspectorHighlightedIconColor(): NSColor;
  inspectorHighlightedSliderKnobColor(): NSColor;
  inspectorIconColor(): NSColor;
  inspectorAccentedBackgroundIconColor(): NSColor;
  inspectorInlineLabelTextColor(): NSColor;
  inspectorLabelBackgroundColor(): NSColor;
  inspectorLabelBorderColor(): NSColor;
  inspectorLabelTextColor(): NSColor;
  inspectorPushButtonBackgroundColor(): NSColor;
  inspectorResizePreviewBackgroundColor(): NSColor;
  inspectorResizePreviewEdgeIndicatorColor(): NSColor;
  inspectorResizePreviewInnerLayerBackgroundColor(): NSColor;
  inspectorResizePreviewInnerLayerBorderColor(): NSColor;
  inspectorSectionBackgroundColor(): NSColor;
  inspectorSectionHeaderTextColor(): NSColor;
  inspectorSectionSeparatorColor(): NSColor;
  inspectorSeparatorColor(): NSColor;
  inspectorSliderKnobBorderColor(): NSColor;
  inspectorSliderKnobColor(): NSColor;
  inspectorSliderRightTrackColor(): NSColor;
  inspectorStylePreviewButtonOverlayHighlightingColor(): NSColor;
  inspectorArtboardPresetHeaderColor(): NSColor;
  inspectorArtboardPresetTableViewBackgroundColor(): NSColor;
  inspectorSecondaryLabelTextColor(): NSColor;
  inspectorSecondaryLabelTextColorHighlighted(): NSColor;
  cache(): BCCache;
  colorPlist(): NSDictionary<any, any>;
  tintedImages(): MSTintedImages;
  layerListArtboardBorderColor(): NSColor;
  layerListSelectedArtboardBorderColor(): NSColor;
  layerListBackgroundColor(): NSColor;
  layerListLightBackgroundColor(): NSColor;
  layerListFilterBarBackgroundColor(): NSColor;
  layerListFilterBarBorderColor(): NSColor;
  layerListFilterTokenBackgroundColor(): NSColor;
  layerListFilterTokenSelectedBackgroundColor(): NSColor;
  layerListFilterTokenTitleColor(): NSColor;
  layerListFilterTokenSelectedTitleColor(): NSColor;
  layerListIconTintColor(): NSColor;
  layerListIconPressedTintColor(): NSColor;
  layerListIconPressedTintColorSelected(): NSColor;
  layerListIconSelectedActiveTintColor(): NSColor;
  layerListIconSelectedInactiveTintColor(): NSColor;
  layerListIconSharedTintColor(): NSColor;
  layerListSplitViewDividerColor(): NSColor;
  layerListSymbolOverrideIconTintColor(): NSColor;
  layerListTabButtonColor(): NSColor;
  canvasArtboardTitleColor(): NSColor;
  canvasBackgroundColor(): NSColor;
  canvasDarkModeBackgroundColor(): NSColor;
  canvasLightModeBackgroundColor(): NSColor;
  canvasFlowArrowColor(): NSColor;
  canvasLayerHighlightColor(): NSColor;
  canvasLayerSelectionColor(): NSColor;
  canvasMeasurementLabelBackgroundColor(): NSColor;
  canvasPageBackgroundColor(): NSColor;
  canvasDarkModePageBackgroundColor(): NSColor;
  canvasLightModePageBackgroundColor(): NSColor;
  canvasPixelLineColor(): NSColor;
  canvasRulerBackgroundColor(): NSColor;
  canvasRulerLineColor(): NSColor;
  canvasRulerLineOccupiedColor(): NSColor;
  canvasRulerLockColor(): NSColor;
  canvasRulerOccupiedColor(): NSColor;
  canvasRulerTextColor(): NSColor;
  canvasRulerTextBackgroundColor(): NSColor;
  canvasSliceOutlineColor(): NSColor;
  canvasSymbolErrorBackgroundColor(): NSColor;
  canvasSymbolErrorBorderColor(): NSColor;
  canvasSymbolErrorTextColor(): NSColor;
  canvasSymbolTitleColor(): NSColor;
  canvasOverrideSelectionColor(): NSColor;
  canvasOverrideSelectionBackgroundColor(): NSColor;
  colorPickerFrequentImageBackgroundColor(): NSColor;
  colorPickerAssetBorderColor(): NSColor;
  colorPickerModifiedAssetIndicatorBorder(): NSColor;
  colorPickerCheckerboardBackgroundColor(): NSColor;
  colorPickerCheckerboardBorderColor(): NSColor;
  colorPickerMarkerFillColor(): NSColor;
  colorPickerMarkerShadowColor(): NSColor;
  colorPickerSeparatorColor(): NSColor;
  colorPickerModelPickerBackgroundColor(): NSColor;
  colorPickerModelPickerBackgroundColorActive(): NSColor;
  colorPickerColorControlsBorder(): NSColor;
  colorPickerColorControlsKnobBorder(): NSColor;
  colorPickerCheckerboardForeground(): NSColor;
  assetPickerItemBorderColor(): NSColor;
  assetPickerItemGridHighlightColor(): NSColor;
  assetPickerImageItemBackgroundColor(): NSColor;
  overlayButtonBackground(): NSColor;
  licenseWindowErrorTextColor(): NSColor;
  preferencesWindowErrorTextColor(): NSColor;
  windowBadgeFontsMissingColor(): NSColor;
  windowBadgeLibraryChangesAvailableColor(): NSColor;
  windowBadgePluginUpdatesAvailableColor(): NSColor;
  cloudPopoverButtonTintColor(): NSColor;
  cloudPopoverButtonTintColorPressed(): NSColor;
  cloudPopoverCancelButtonTintColor(): NSColor;
  cloudPopoverCancelButtonTintColorPressed(): NSColor;
  windowBadgeTrialMessageColor(): NSColor;
  windowBadgeMultipleNotificationsColor(): NSColor;
  windowBadgeTextColor(): NSColor;
  windowBadgeUnfocusedPillColor(): NSColor;
  hoverButtonHoverColor(): NSColor;
  hoverButtonNormalColor(): NSColor;
  splitViewDividerColor(): NSColor;
  isDark(): boolean;
  isGraphiteAccentColor(): boolean;
  darkModeScheme(): MSThemeDarkModeScheme;
  setDarkModeScheme(darkModeScheme: MSThemeDarkModeScheme): void;
}

declare const MSTheme: {
  alloc(): MSThemeUninitialized;
  class(): MSTheme;
  setupAppearance(): void;
  load(): void;
  instancesRespondToSelector(aSelector: string): boolean;
  conformsToProtocol(protocol: Protocol): boolean;
  instanceMethodForSelector(aSelector: string): IMP;
  isSubclassOfClass(aClass: any): boolean;
  hash(): NSUInteger;
  superclass(): any;
  description(): NSString;
  debugDescription(): NSString;
  useStoredAccessor(): boolean;
  keyPathsForValuesAffectingValueForKey(key: NSString | string): NSSet<any>;
  automaticallyNotifiesObserversForKey(key: NSString | string): boolean;
  setKeys_triggerChangeNotificationsForDependentKey(keys: NSArray<any> | any[], dependentKey: NSString | string): void;
  classFallbacksForKeyedArchiver(): NSArray<any>;
  classForKeyedUnarchiver(): any;
  version(): NSInteger;
  setVersion(aVersion: NSInteger): void;
  cancelPreviousPerformRequestsWithTarget_selector_object(aTarget: any, aSelector: string, anArgument: any | null): void;
  cancelPreviousPerformRequestsWithTarget(aTarget: any): void;
  exposeBinding(binding: NSBindingName): void;
  setDefaultPlaceholder_forMarker_withBinding(placeholder: any | null, marker: any | null, binding: NSBindingName): void;
  defaultPlaceholderForMarker_withBinding(marker: any | null, binding: NSBindingName): any;
  mo_swizzleAdditions(): void;
  mo_mocha(): MOClassDescription;
  isSelectorExcludedFromMochaScript(selector: string): boolean;
  selectorForMochaPropertyName(propertyName: NSString | string): string;
  sharedTheme(): MSTheme;
  accessInstanceVariablesDirectly(): boolean;

}

