interface NSURLUninitialized<InitializedType = NSURL> extends NSObjectUninitialized<NSURL> {
  initWithScheme_host_path(scheme: NSString | string, host: NSString | string | null, path: NSString | string): InitializedType;
  initFileURLWithPath_isDirectory_relativeToURL(path: NSString | string, isDir: boolean, baseURL: NSURL | null): InitializedType;
  initFileURLWithPath_relativeToURL(path: NSString | string, baseURL: NSURL | null): InitializedType;
  initFileURLWithPath_isDirectory(path: NSString | string, isDir: boolean): InitializedType;
  initFileURLWithPath(path: NSString | string): InitializedType;
  initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL(path: string, isDir: boolean, baseURL: NSURL | null): InitializedType;
  initWithString(URLString: NSString | string): InitializedType;
  initWithString_relativeToURL(URLString: NSString | string, baseURL: NSURL | null): InitializedType;
  initWithDataRepresentation_relativeToURL(data: NSData, baseURL: NSURL | null): InitializedType;
  initAbsoluteURLWithDataRepresentation_relativeToURL(data: NSData, baseURL: NSURL | null): InitializedType;
  initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(bookmarkData: NSData, options: NSURLBookmarkResolutionOptions, relativeURL: NSURL | null, isStale: boolean, error: NSError): InitializedType;
}
interface NSURL extends NSObject, INSSecureCoding, INSCopying {
  getFileSystemRepresentation_maxLength(buffer: string, maxBufferLength: NSUInteger): boolean;
  checkResourceIsReachableAndReturnError_NS_SWIFT_NOTHROW(error: NSError): boolean;
  isFileReferenceURL(): boolean;
  fileReferenceURL(): NSURL;
  getResourceValue_forKey_error(value: any, key: NSURLResourceKey, error: NSError): boolean;
  resourceValuesForKeys_error(keys: NSArray<any> | any[], error: NSError): NSDictionary<any, any>;
  setResourceValue_forKey_error(value: any | null, key: NSURLResourceKey, error: NSError): boolean;
  setResourceValues_error(keyedValues: NSDictionary<any, any> | {[key: string]: any}, error: NSError): boolean;
  removeCachedResourceValueForKey(key: NSURLResourceKey): void;
  removeAllCachedResourceValues(): void;
  setTemporaryResourceValue_forKey(value: any | null, key: NSURLResourceKey): void;
  bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error(options: NSURLBookmarkCreationOptions, keys: NSArray<any> | any[] | null, relativeURL: NSURL | null, error: NSError): NSData;
  startAccessingSecurityScopedResource(): boolean;
  stopAccessingSecurityScopedResource(): void;
  getPromisedItemResourceValue_forKey_error(value: any, key: NSURLResourceKey, error: NSError): boolean;
  promisedItemResourceValuesForKeys_error(keys: NSArray<any> | any[], error: NSError): NSDictionary<any, any>;
  checkPromisedItemIsReachableAndReturnError_NS_SWIFT_NOTHROW(error: NSError): boolean;
  URLByAppendingPathComponent(pathComponent: NSString | string): NSURL;
  URLByAppendingPathComponent_isDirectory(pathComponent: NSString | string, isDirectory: boolean): NSURL;
  URLByAppendingPathExtension(pathExtension: NSString | string): NSURL;
  resourceDataUsingCache(shouldUseCache: boolean): NSData;
  loadResourceDataNotifyingClient_usingCache(client: any, shouldUseCache: boolean): void;
  propertyForKey(propertyKey: NSString | string): any;
  setResourceData(data: NSData): boolean;
  setProperty_forKey(property: any, propertyKey: NSString | string): boolean;
  URLHandleUsingCache(shouldUseCache: boolean): NSURLHandle;
  writeToPasteboard(pasteBoard: NSPasteboard): void;
  URLByStrippingInvisiblePeriod_bc(): NSURL;
  URLByAppendingNameWithSeparators_defaultName(name: NSString | string, defaultName: NSString | string): NSURL;
  hasExtension(extension: NSString | string): boolean;
  withExtension(extension: NSString | string): NSURL;
  URLByResolvingSymlinksAndAliases(): NSURL;
  isEqualToFileURL_bc(otherURL: NSURL): boolean;
  appendingCloudDeeplinkComponentsToArtboard(artboard: SCKArtboard | null): NSURL;
  appendingCloudDeeplinkComponentsInPageToArtboard(artboard: SCKArtboard | null): NSURL;

  dataRepresentation(): NSData;
  absoluteString(): NSString;
  relativeString(): NSString;
  baseURL(): NSURL;
  absoluteURL(): NSURL;
  scheme(): NSString;
  resourceSpecifier(): NSString;
  host(): NSString;
  port(): NSNumber;
  user(): NSString;
  password(): NSString;
  path(): NSString;
  fragment(): NSString;
  parameterString(): NSString;
  query(): NSString;
  relativePath(): NSString;
  hasDirectoryPath(): boolean;
  fileSystemRepresentation(): string;
  fileURL(): boolean;
  standardizedURL(): NSURL;
  filePathURL(): NSURL;
  pathComponents(): NSArray<any>;
  lastPathComponent(): NSString;
  pathExtension(): NSString;
  URLByDeletingLastPathComponent(): NSURL;
  URLByDeletingPathExtension(): NSURL;
  URLByStandardizingPath(): NSURL;
  URLByResolvingSymlinksInPath(): NSURL;
  isInTrash_bc(): boolean;
  isCloudShare(): boolean;
  cloudShareURL(): NSURL;
  cloudShareShortID(): NSString;
  cloudPageSlug(): NSString;
  cloudArtboardSlug(): NSString;
  cloudAPIName(): NSString;
  cloudAPIEnvironment(): SCKAPIEnvironment;
  isExportRequest(): boolean;
  exportRootLayerID(): NSString;
  exportRect(): CGRect;
  exportScale(): CGFloat;
  constrainedExportSize(): CGSize;
  exportImageType(): NSString;
  mirrorCacheKey(): NSString;
}
declare const NSURL: {
  alloc(): NSURLUninitialized;
  class(): NSURL;  fileURLWithPath_isDirectory_relativeToURL(path: NSString | string, isDir: boolean, baseURL: NSURL | null): NSURL;
  fileURLWithPath_relativeToURL(path: NSString | string, baseURL: NSURL | null): NSURL;
  fileURLWithPath_isDirectory(path: NSString | string, isDir: boolean): NSURL;
  fileURLWithPath(path: NSString | string): NSURL;
  fileURLWithFileSystemRepresentation_isDirectory_relativeToURL(path: string, isDir: boolean, baseURL: NSURL | null): NSURL;
  URLWithString(URLString: NSString | string): NSURL;
  URLWithString_relativeToURL(URLString: NSString | string, baseURL: NSURL | null): NSURL;
  URLWithDataRepresentation_relativeToURL(data: NSData, baseURL: NSURL | null): NSURL;
  absoluteURLWithDataRepresentation_relativeToURL(data: NSData, baseURL: NSURL | null): NSURL;
  URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(bookmarkData: NSData, options: NSURLBookmarkResolutionOptions, relativeURL: NSURL | null, isStale: boolean, error: NSError): NSURL;
  resourceValuesForKeys_fromBookmarkData(keys: NSArray<any> | any[], bookmarkData: NSData): NSDictionary<any, any>;
  writeBookmarkData_toURL_options_error(bookmarkData: NSData, bookmarkFileURL: NSURL, options: NSURLBookmarkFileCreationOptions, error: NSError): boolean;
  bookmarkDataWithContentsOfURL_error(bookmarkFileURL: NSURL, error: NSError): NSData;
  URLByResolvingAliasFileAtURL_options_error(url: NSURL, options: NSURLBookmarkResolutionOptions, error: NSError): NSURL;
  fileURLWithPathComponents(components: NSArray<any> | any[]): NSURL;
  URLFromPasteboard(pasteBoard: NSPasteboard): NSURL;
  websiteRenewalURLForLicense(license: any | null): NSURL;
  websiteRenewalURLForLicenseKey(licenseKey: NSString | string | null): NSURL;
  websiteAvailableVersionsURLForLicense(license: any | null): NSURL;
  cloudShareURLWithShortID_environment(shortID: NSString | string, environment: SCKAPIEnvironment | null): NSURL;

}

