interface NSNumberFormatterUninitialized<InitializedType = NSNumberFormatter> extends NSFormatterUninitialized<NSNumberFormatter> {}

interface NSNumberFormatter extends NSFormatter {
  getObjectValue_forString_range_error(obj: any, string: NSString | string, rangep: NSRange, error: MOPointer<NSError>): boolean;
  stringFromNumber(number: NSNumber | number): NSString;
  numberFromString(string: NSString | string): NSNumber;

  formattingContext(): NSFormattingContext;
  setFormattingContext(formattingContext: NSFormattingContext): void;
  numberStyle(): NSNumberFormatterStyle;
  setNumberStyle(numberStyle: NSNumberFormatterStyle): void;
  locale(): NSLocale;
  setLocale(locale: NSLocale): void;
  generatesDecimalNumbers(): boolean;
  setGeneratesDecimalNumbers(generatesDecimalNumbers: boolean): void;
  formatterBehavior(): NSNumberFormatterBehavior;
  setFormatterBehavior(formatterBehavior: NSNumberFormatterBehavior): void;
  negativeFormat(): NSString;
  setNegativeFormat(negativeFormat: NSString | string): void;
  textAttributesForNegativeValues(): NSDictionary<any, any>;
  setTextAttributesForNegativeValues(textAttributesForNegativeValues: NSDictionary<any, any> | {[key: string]: any}): void;
  positiveFormat(): NSString;
  setPositiveFormat(positiveFormat: NSString | string): void;
  textAttributesForPositiveValues(): NSDictionary<any, any>;
  setTextAttributesForPositiveValues(textAttributesForPositiveValues: NSDictionary<any, any> | {[key: string]: any}): void;
  allowsFloats(): boolean;
  setAllowsFloats(allowsFloats: boolean): void;
  decimalSeparator(): NSString;
  setDecimalSeparator(decimalSeparator: NSString | string): void;
  alwaysShowsDecimalSeparator(): boolean;
  setAlwaysShowsDecimalSeparator(alwaysShowsDecimalSeparator: boolean): void;
  currencyDecimalSeparator(): NSString;
  setCurrencyDecimalSeparator(currencyDecimalSeparator: NSString | string): void;
  usesGroupingSeparator(): boolean;
  setUsesGroupingSeparator(usesGroupingSeparator: boolean): void;
  groupingSeparator(): NSString;
  setGroupingSeparator(groupingSeparator: NSString | string): void;
  zeroSymbol(): NSString;
  setZeroSymbol(zeroSymbol: NSString | string): void;
  textAttributesForZero(): NSDictionary<any, any>;
  setTextAttributesForZero(textAttributesForZero: NSDictionary<any, any> | {[key: string]: any}): void;
  nilSymbol(): NSString;
  setNilSymbol(nilSymbol: NSString | string): void;
  textAttributesForNil(): NSDictionary<any, any>;
  setTextAttributesForNil(textAttributesForNil: NSDictionary<any, any> | {[key: string]: any}): void;
  notANumberSymbol(): NSString;
  setNotANumberSymbol(notANumberSymbol: NSString | string): void;
  textAttributesForNotANumber(): NSDictionary<any, any>;
  setTextAttributesForNotANumber(textAttributesForNotANumber: NSDictionary<any, any> | {[key: string]: any}): void;
  positiveInfinitySymbol(): NSString;
  setPositiveInfinitySymbol(positiveInfinitySymbol: NSString | string): void;
  textAttributesForPositiveInfinity(): NSDictionary<any, any>;
  setTextAttributesForPositiveInfinity(textAttributesForPositiveInfinity: NSDictionary<any, any> | {[key: string]: any}): void;
  negativeInfinitySymbol(): NSString;
  setNegativeInfinitySymbol(negativeInfinitySymbol: NSString | string): void;
  textAttributesForNegativeInfinity(): NSDictionary<any, any>;
  setTextAttributesForNegativeInfinity(textAttributesForNegativeInfinity: NSDictionary<any, any> | {[key: string]: any}): void;
  positivePrefix(): NSString;
  setPositivePrefix(positivePrefix: NSString | string): void;
  positiveSuffix(): NSString;
  setPositiveSuffix(positiveSuffix: NSString | string): void;
  negativePrefix(): NSString;
  setNegativePrefix(negativePrefix: NSString | string): void;
  negativeSuffix(): NSString;
  setNegativeSuffix(negativeSuffix: NSString | string): void;
  currencyCode(): NSString;
  setCurrencyCode(currencyCode: NSString | string): void;
  currencySymbol(): NSString;
  setCurrencySymbol(currencySymbol: NSString | string): void;
  internationalCurrencySymbol(): NSString;
  setInternationalCurrencySymbol(internationalCurrencySymbol: NSString | string): void;
  percentSymbol(): NSString;
  setPercentSymbol(percentSymbol: NSString | string): void;
  perMillSymbol(): NSString;
  setPerMillSymbol(perMillSymbol: NSString | string): void;
  minusSign(): NSString;
  setMinusSign(minusSign: NSString | string): void;
  plusSign(): NSString;
  setPlusSign(plusSign: NSString | string): void;
  exponentSymbol(): NSString;
  setExponentSymbol(exponentSymbol: NSString | string): void;
  groupingSize(): NSUInteger;
  setGroupingSize(groupingSize: NSUInteger): void;
  secondaryGroupingSize(): NSUInteger;
  setSecondaryGroupingSize(secondaryGroupingSize: NSUInteger): void;
  multiplier(): NSNumber;
  setMultiplier(multiplier: NSNumber | number): void;
  formatWidth(): NSUInteger;
  setFormatWidth(formatWidth: NSUInteger): void;
  paddingCharacter(): NSString;
  setPaddingCharacter(paddingCharacter: NSString | string): void;
  paddingPosition(): NSNumberFormatterPadPosition;
  setPaddingPosition(paddingPosition: NSNumberFormatterPadPosition): void;
  roundingMode(): NSNumberFormatterRoundingMode;
  setRoundingMode(roundingMode: NSNumberFormatterRoundingMode): void;
  roundingIncrement(): NSNumber;
  setRoundingIncrement(roundingIncrement: NSNumber | number): void;
  minimumIntegerDigits(): NSUInteger;
  setMinimumIntegerDigits(minimumIntegerDigits: NSUInteger): void;
  maximumIntegerDigits(): NSUInteger;
  setMaximumIntegerDigits(maximumIntegerDigits: NSUInteger): void;
  minimumFractionDigits(): NSUInteger;
  setMinimumFractionDigits(minimumFractionDigits: NSUInteger): void;
  maximumFractionDigits(): NSUInteger;
  setMaximumFractionDigits(maximumFractionDigits: NSUInteger): void;
  minimum(): NSNumber;
  setMinimum(minimum: NSNumber | number): void;
  maximum(): NSNumber;
  setMaximum(maximum: NSNumber | number): void;
  currencyGroupingSeparator(): NSString;
  setCurrencyGroupingSeparator(currencyGroupingSeparator: NSString | string): void;
  lenient(): boolean;
  setLenient(lenient: boolean): void;
  usesSignificantDigits(): boolean;
  setUsesSignificantDigits(usesSignificantDigits: boolean): void;
  minimumSignificantDigits(): NSUInteger;
  setMinimumSignificantDigits(minimumSignificantDigits: NSUInteger): void;
  maximumSignificantDigits(): NSUInteger;
  setMaximumSignificantDigits(maximumSignificantDigits: NSUInteger): void;
  partialStringValidationEnabled(): boolean;
  setPartialStringValidationEnabled(partialStringValidationEnabled: boolean): void;
  hasThousandSeparators(): boolean;
  setHasThousandSeparators(hasThousandSeparators: boolean): void;
  thousandSeparator(): NSString;
  setThousandSeparator(thousandSeparator: NSString | string): void;
  localizesFormat(): boolean;
  setLocalizesFormat(localizesFormat: boolean): void;
  format(): NSString;
  setFormat(format: NSString | string): void;
  attributedStringForZero(): NSAttributedString;
  setAttributedStringForZero(attributedStringForZero: NSAttributedString): void;
  attributedStringForNil(): NSAttributedString;
  setAttributedStringForNil(attributedStringForNil: NSAttributedString): void;
  attributedStringForNotANumber(): NSAttributedString;
  setAttributedStringForNotANumber(attributedStringForNotANumber: NSAttributedString): void;
  roundingBehavior(): NSDecimalNumberHandler;
  setRoundingBehavior(roundingBehavior: NSDecimalNumberHandler): void;
}

declare const NSNumberFormatter: {
  alloc(): NSNumberFormatterUninitialized;
  class(): NSNumberFormatter;
  localizedStringFromNumber_numberStyle(num: NSNumber | number, nstyle: NSNumberFormatterStyle): NSString;
  defaultFormatterBehavior(): NSNumberFormatterBehavior;
  setDefaultFormatterBehavior(behavior: NSNumberFormatterBehavior): void;
  accessInstanceVariablesDirectly(): boolean;

}

