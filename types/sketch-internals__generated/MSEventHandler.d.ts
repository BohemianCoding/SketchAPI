interface MSEventHandlerUninitialized<InitializedType = MSEventHandler> extends NSResponderUninitialized<MSEventHandler> {
  initWithManager(aManager: MSEventHandlerManager): InitializedType;
}
interface MSEventHandler extends NSResponder, INSDraggingDestination, INSTouchBarDelegate {
  currentGroup(): MSLayerGroup;
  layersToCopy(): MSLayerArray;
  parentForInsertingLayer(layer: MSLayer): MSLayerGroup;
  mouseDownEvent(event: NSEvent): boolean;
  mouseDraggedEvent(event: NSEvent): boolean;
  mouseUpEvent(event: NSEvent): boolean;
  mouseMovedEvent(event: NSEvent): boolean;
  rightMouseDown(event: NSEvent): void;
  absoluteMouseDown_clickCount_flags(mouse: NSPoint, c: NSUInteger, flags: NSUInteger): boolean;
  absoluteMouseDragged_flags(mouse: NSPoint, flags: NSEventModifierFlags): boolean;
  absoluteMouseUp_flags(mouse: NSPoint, flags: NSUInteger): boolean;
  absoluteMouseMoved_flags(mouse: NSPoint, flags: NSEventModifierFlags): boolean;
  mouseDraggedOutsideViewShouldMoveScrollOrigin(): boolean;
  zoomValue(): CGFloat;
  viewDidScroll(sender: any): void;
  trackMouse(tracker: MSMouseTracker): void;
  addGestureRecognizer(recognizer: MSGestureRecognizer): void;
  updateCursor(): boolean;
  setNeedsUpdateCursor(): void;
  cancelOperation(sender: any): void;
  setMeasurementTextWithSize(size: NSSize): void;
  setMeasurementTextWithDegrees(degrees: NSInteger): void;
  addOverlayRenderer(renderer: MSOverlayRenderer): void;
  prepareGraphicsStateForGroup_drawingBlock(group: MSLayerGroup, block: BCVoidBlock): void;
  drawMeasurementLabel(): void;
  drawDragSelection(): void;
  handlerWillLoseFocus(): void;
  handlerDidLoseFocus(): void;
  selectAll(sender: any): IBAction;
  returnToDefaultHandler(): void;
  returnToDefaultHandlerByClickingOutside(): void;
  selectToolbarItemWithIdentifier(identifier: NSString | string): void;
  menuForEvent(theEvent: NSEvent): NSMenu;
  writeLayers_toPasteboard(layers: MSLayerArray, pb: NSPasteboard): void;
  duplicateSelectedLayersWithOffset(offset: CGVector): NSArray<any>;
  contentDrawView(): MSContentDrawView;
  currentPage(): MSPage;
  document(): MSDocument;
  refreshOverlay(): void;
  cut(sender: any): IBAction;
  copy(sender: any): IBAction;
  paste(sender: any): IBAction;
  pasteWithStyle(sender: any): IBAction;
  pasteOverSelection(sender: any): IBAction;
  pasteHere(sender: any): IBAction;
  duplicate(sender: any): IBAction;
  delete(sender: any): IBAction;
  itemAtPoint_modifierFlags(mouse: NSPoint, flags: NSEventModifierFlags): MSHitTestResult;
  hitTestingOptions(): MSLayerSelectionOptions;
  deleteKeyIsPressed(c: unichar): boolean;
  enterKeyIsPressed(c: unichar): boolean;
  escapeKeyIsPressed(c: unichar): boolean;
  arrowKeyIsPressed(c: unichar): boolean;
  drawHandles(): void;
  toolbarIdentifier(): NSString;
  changeColor(sender: any): void;
  prepareToDraw(treeDiff: MSTreeDiff): void;
  selectedLayers(): MSLayerArray;
  selectLayer_extendSelection(layer: MSLayer, extend: boolean): void;
  imageName(): NSString;
  willMoveThroughHistory(note: NSNotification): void;
  didMoveThroughHistory(note: NSNotification): void;
  commitPendingEdits(): void;
  reloadFollowingBackgroundChangesToDocument(): void;
  zoomToSelection(): void;
  zoomToArtboard(): void;
  selectedRect(): NSRect;
  centerPointForZooming(): NSPoint;
  draggingEntered(sender: any): NSDragOperation;
  draggingExited(sender: any): void;
  prepareForDragOperation(sender: any): boolean;
  draggingUpdated(sender: any): NSDragOperation;
  performDragOperation(sender: any): boolean;
  zoomValueWillChangeTo(zoomValue: CGFloat): void;
  zoomValueDidChange(): void;
  layerListSelectionDidChange(selection: NSArray<any> | any[]): void;
  layerRulerOriginChanged(): void;
  currentPageDidChange(): void;
  allowsSwitchToInsertAction(): boolean;
  handlesHandToolItself(): boolean;
  insertTab(sender: any): void;
  insertBacktab(sender: any): void;
  mouseExited(): void;
  mayShowResizingInspectorView(): boolean;
  editLayer(layer: MSLayer): void;
  willResignFirstResponder(): void;
  layerPositionPossiblyChanged(): void;
  configureInspector(inspector: MSInspectorController): void;
  inspectorViewControllersForLayers_standardControllers(layers: NSArray<any> | any[], standardInspectors: MSStandardInspectorViewControllers): NSArray<any>;
  styleViewControllersForLayers_fromStyleInspectorSection(layers: MSLayerArray, styleSection: MSStyleInspectorSection): NSArray<any>;
  inspectorLocation(): MSInpectorLocation;
  focusOnMainWindow(): void;
  canDuplicate(): boolean;
  shouldFitToPixelBounds(): boolean;
  defaultSnapMask(): MSSnapMask;
  nudgeDistanceForFlags(flags: NSEventModifierFlags): CGFloat;
  willStartExporting(): void;
  touchBarWithIdentifiers(identifiers: NSArray<any> | any[]): NSTouchBar;
  refreshTouchBarItemWithIdentifier(identifier: NSString | string): void;
  documentWindow(): MSDocumentWindow;

  manager(): MSEventHandlerManager;
  setManager(manager: MSEventHandlerManager): void;
  offsetTracker(): MSDuplicateOffsetTracker;
  setOffsetTracker(offsetTracker: MSDuplicateOffsetTracker): void;
  pressedKeys(): NSString;
  setPressedKeys(pressedKeys: NSString | string): void;
  handlesHistoryCoalescing(): boolean;
  shouldExitOnContentViewResize(): boolean;
  undoManager(): NSUndoManager;
  applicableActionItemIdentifier(): NSString;
  gestureRecognizers(): NSArray<any>;
  cursor(): NSCursor;
  setCursor(cursor: NSCursor): void;
  measurementText(): NSString;
  setMeasurementText(measurementText: NSString | string): void;
  overlayRenderers(): NSArray<any>;
  selectionRect(): NSRect;
  setSelectionRect(selectionRect: NSRect): void;
  wantsStandardSelectionControls(): boolean;
  wantsLayerHighlight(): boolean;
}
declare const MSEventHandler: {
  alloc(): MSEventHandlerUninitialized;
  class(): MSEventHandler;  eventHandlerWithManager(aManager: MSEventHandlerManager): any;

}

