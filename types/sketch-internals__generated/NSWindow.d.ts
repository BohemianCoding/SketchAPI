interface NSWindowUninitialized<InitializedType = NSWindow> extends NSResponderUninitialized<NSWindow> {
  initWithContentRect_styleMask_backing_defer(contentRect: NSRect, style: NSWindowStyleMask, backingStoreType: NSBackingStoreType, flag: boolean): InitializedType;
  initWithContentRect_styleMask_backing_defer_screen(contentRect: NSRect, style: NSWindowStyleMask, backingStoreType: NSBackingStoreType, flag: boolean, screen: NSScreen | null): InitializedType;
  initWithWindowRef(windowRef: void): InitializedType;
}
interface NSWindow extends NSResponder, INSAnimatablePropertyContainer, INSMenuItemValidation, INSUserInterfaceValidations, INSUserInterfaceItemIdentification, INSAppearanceCustomization, INSAccessibilityElement, INSAccessibility {
  updateConstraintsIfNeeded(): void;
  layoutIfNeeded(): void;
  anchorAttributeForOrientation(orientation: NSLayoutConstraintOrientation): NSLayoutAttribute;
  setAnchorAttribute_forOrientation(attr: NSLayoutAttribute, orientation: NSLayoutConstraintOrientation): void;
  visualizeConstraints(constraints: NSArray<any> | any[] | null): void;
  frameRectForContentRect(contentRect: NSRect): NSRect;
  contentRectForFrameRect(frameRect: NSRect): NSRect;
  addTitlebarAccessoryViewController(childViewController: NSTitlebarAccessoryViewController): void;
  insertTitlebarAccessoryViewController_atIndex(childViewController: NSTitlebarAccessoryViewController, index: NSInteger): void;
  removeTitlebarAccessoryViewControllerAtIndex(index: NSInteger): void;
  setTitleWithRepresentedFilename(filename: NSString | string): void;
  fieldEditor_forObject(createFlag: boolean, object: any | null): NSText;
  endEditingFor(object: any | null): void;
  constrainFrameRect_toScreen(frameRect: NSRect, screen: NSScreen | null): NSRect;
  setFrame_display(frameRect: NSRect, flag: boolean): void;
  setContentSize(size: NSSize): void;
  setFrameOrigin(point: NSPoint): void;
  setFrameTopLeftPoint(point: NSPoint): void;
  cascadeTopLeftFromPoint(topLeftPoint: NSPoint): NSPoint;
  animationResizeTime(newFrame: NSRect): NSTimeInterval;
  setFrame_display_animate(frameRect: NSRect, displayFlag: boolean, animateFlag: boolean): void;
  displayIfNeeded(): void;
  display(): void;
  update(): void;
  makeFirstResponder(responder: NSResponder | null): boolean;
  keyDown(event: NSEvent): void;
  close(): void;
  miniaturize(sender: any | null): void;
  deminiaturize(sender: any | null): void;
  zoom(sender: any | null): void;
  tryToPerform_with(action: string, object: any | null): boolean;
  validRequestorForSendType_returnType(sendType: NSPasteboardType | null, returnType: NSPasteboardType | null): any;
  setContentBorderThickness_forEdge(thickness: CGFloat, edge: NSRectEdge): void;
  contentBorderThicknessForEdge(edge: NSRectEdge): CGFloat;
  setAutorecalculatesContentBorderThickness_forEdge(flag: boolean, edge: NSRectEdge): void;
  autorecalculatesContentBorderThicknessForEdge(edge: NSRectEdge): boolean;
  center(): void;
  makeKeyAndOrderFront(sender: any | null): void;
  orderFront(sender: any | null): void;
  orderBack(sender: any | null): void;
  orderOut(sender: any | null): void;
  orderWindow_relativeTo(place: NSWindowOrderingMode, otherWin: NSInteger): void;
  orderFrontRegardless(): void;
  makeKeyWindow(): void;
  makeMainWindow(): void;
  becomeKeyWindow(): void;
  resignKeyWindow(): void;
  becomeMainWindow(): void;
  resignMainWindow(): void;
  convertRectToScreen(rect: NSRect): NSRect;
  convertRectFromScreen(rect: NSRect): NSRect;
  convertPointToScreen(point: NSPoint): NSPoint;
  convertPointFromScreen(point: NSPoint): NSPoint;
  convertRectToBacking(rect: NSRect): NSRect;
  convertRectFromBacking(rect: NSRect): NSRect;
  convertPointToBacking(point: NSPoint): NSPoint;
  convertPointFromBacking(point: NSPoint): NSPoint;
  backingAlignedRect_options(rect: NSRect, options: NSAlignmentOptions): NSRect;
  performClose(sender: any | null): void;
  performMiniaturize(sender: any | null): void;
  performZoom(sender: any | null): void;
  dataWithEPSInsideRect(rect: NSRect): NSData;
  dataWithPDFInsideRect(rect: NSRect): NSData;
  print(sender: any | null): void;
  setDynamicDepthLimit(flag: boolean): void;
  invalidateShadow(): void;
  disableScreenUpdatesUntilFlush(): void;
  toggleFullScreen(sender: any | null): void;
  setFrameFromString(string: NSWindowPersistableFrameDescriptor): void;
  saveFrameUsingName(name: NSWindowFrameAutosaveName): void;
  setFrameUsingName_force(name: NSWindowFrameAutosaveName, force: boolean): boolean;
  setFrameUsingName(name: NSWindowFrameAutosaveName): boolean;
  setFrameAutosaveName(name: NSWindowFrameAutosaveName): boolean;
  beginSheet_completionHandler(sheetWindow: NSWindow, handler: Block): void;
  beginCriticalSheet_completionHandler(sheetWindow: NSWindow, handler: Block): void;
  endSheet(sheetWindow: NSWindow): void;
  endSheet_returnCode(sheetWindow: NSWindow, returnCode: NSModalResponse): void;
  standardWindowButton(b: NSWindowButton): NSButton;
  addChildWindow_ordered(childWin: NSWindow, place: NSWindowOrderingMode): void;
  removeChildWindow(childWin: NSWindow): void;
  canRepresentDisplayGamut(displayGamut: NSDisplayGamut): boolean;
  performWindowDragWithEvent(event: NSEvent): void;
  selectNextKeyView(sender: any | null): void;
  selectPreviousKeyView(sender: any | null): void;
  selectKeyViewFollowingView(view: NSView): void;
  selectKeyViewPrecedingView(view: NSView): void;
  disableKeyEquivalentForDefaultButtonCell(): void;
  enableKeyEquivalentForDefaultButtonCell(): void;
  recalculateKeyViewLoop(): void;
  toggleToolbarShown(sender: any | null): void;
  runToolbarCustomizationPalette(sender: any | null): void;
  selectNextTab(sender: any | null): IBAction;
  selectPreviousTab(sender: any | null): IBAction;
  moveTabToNewWindow(sender: any | null): IBAction;
  mergeAllWindows(sender: any | null): IBAction;
  toggleTabBar(sender: any | null): IBAction;
  toggleTabOverview(sender: any | null): IBAction;
  addTabbedWindow_ordered(window: NSWindow, ordered: NSWindowOrderingMode): void;
  trackEventsMatchingMask_timeout_mode_handler(mask: NSEventMask, timeout: NSTimeInterval, mode: NSRunLoopMode, trackingHandler: Block): void;
  nextEventMatchingMask(mask: NSUInteger): NSEvent;
  nextEventMatchingMask_untilDate_inMode_dequeue(mask: NSUInteger, expiration: NSDate | null, mode: NSRunLoopMode, deqFlag: boolean): NSEvent;
  discardEventsMatchingMask_beforeEvent(mask: NSUInteger, lastEvent: NSEvent | null): void;
  postEvent_atStart(event: NSEvent, flag: boolean): void;
  sendEvent(event: NSEvent): void;
  disableCursorRects(): void;
  enableCursorRects(): void;
  discardCursorRects(): void;
  invalidateCursorRectsForView(view: NSView): void;
  resetCursorRects(): void;
  dragImage_at_offset_event_pasteboard_source_slideBack(image: NSImage, baseLocation: NSPoint, initialOffset: NSSize, event: NSEvent, pboard: NSPasteboard, sourceObj: any, slideFlag: boolean): void;
  registerForDraggedTypes(newTypes: NSArray<any> | any[]): void;
  unregisterDraggedTypes(): void;
  cacheImageInRect(rect: NSRect): void;
  restoreCachedImage(): void;
  discardCachedImage(): void;
  gState(): NSInteger;
  convertBaseToScreen(point: NSPoint): NSPoint;
  convertScreenToBase(point: NSPoint): NSPoint;
  userSpaceScaleFactor(): CGFloat;
  useOptimizedDrawing(flag: boolean): void;
  canStoreColor(): boolean;
  disableFlushWindow(): void;
  enableFlushWindow(): void;
  flushWindow(): void;
  flushWindowIfNeeded(): void;
  disableSnapshotRestoration(): void;
  enableSnapshotRestoration(): void;
  setIsMiniaturized(flag: boolean): void;
  setIsVisible(flag: boolean): void;
  setIsZoomed(flag: boolean): void;
  handleCloseScriptCommand(command: NSCloseCommand): any;
  handlePrintScriptCommand(command: NSScriptCommand): any;
  handleSaveScriptCommand(command: NSScriptCommand): any;
  convertPointFromScreen_ch(point: NSPoint): NSPoint;
  closePopovers(): boolean;
  commitEditedTextRetainingFirstResponder(): void;

  drawers(): NSArray<any>;
  title(): NSString;
  setTitle(title: NSString | string): void;
  titleVisibility(): NSWindowTitleVisibility;
  setTitleVisibility(titleVisibility: NSWindowTitleVisibility): void;
  titlebarAppearsTransparent(): boolean;
  setTitlebarAppearsTransparent(titlebarAppearsTransparent: boolean): void;
  contentLayoutRect(): NSRect;
  contentLayoutGuide(): any;
  titlebarAccessoryViewControllers(): NSArray<any>;
  setTitlebarAccessoryViewControllers(titlebarAccessoryViewControllers: NSArray<any> | any[]): void;
  representedURL(): NSURL;
  setRepresentedURL(representedURL: NSURL): void;
  representedFilename(): NSString;
  setRepresentedFilename(representedFilename: NSString | string): void;
  excludedFromWindowsMenu(): boolean;
  setExcludedFromWindowsMenu(excludedFromWindowsMenu: boolean): void;
  contentView(): NSView;
  setContentView(contentView: NSView): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  windowNumber(): NSInteger;
  styleMask(): NSWindowStyleMask;
  setStyleMask(styleMask: NSWindowStyleMask): void;
  frame(): NSRect;
  inLiveResize(): boolean;
  resizeIncrements(): NSSize;
  setResizeIncrements(resizeIncrements: NSSize): void;
  aspectRatio(): NSSize;
  setAspectRatio(aspectRatio: NSSize): void;
  contentResizeIncrements(): NSSize;
  setContentResizeIncrements(contentResizeIncrements: NSSize): void;
  contentAspectRatio(): NSSize;
  setContentAspectRatio(contentAspectRatio: NSSize): void;
  viewsNeedDisplay(): boolean;
  setViewsNeedDisplay(viewsNeedDisplay: boolean): void;
  preservesContentDuringLiveResize(): boolean;
  setPreservesContentDuringLiveResize(preservesContentDuringLiveResize: boolean): void;
  firstResponder(): NSResponder;
  resizeFlags(): NSEventModifierFlags;
  releasedWhenClosed(): boolean;
  setReleasedWhenClosed(releasedWhenClosed: boolean): void;
  zoomed(): boolean;
  miniaturized(): boolean;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  movable(): boolean;
  setMovable(movable: boolean): void;
  movableByWindowBackground(): boolean;
  setMovableByWindowBackground(movableByWindowBackground: boolean): void;
  hidesOnDeactivate(): boolean;
  setHidesOnDeactivate(hidesOnDeactivate: boolean): void;
  canHide(): boolean;
  setCanHide(canHide: boolean): void;
  miniwindowImage(): NSImage;
  setMiniwindowImage(miniwindowImage: NSImage): void;
  miniwindowTitle(): NSString;
  setMiniwindowTitle(miniwindowTitle: NSString | string): void;
  dockTile(): NSDockTile;
  documentEdited(): boolean;
  setDocumentEdited(documentEdited: boolean): void;
  visible(): boolean;
  keyWindow(): boolean;
  mainWindow(): boolean;
  canBecomeKeyWindow(): boolean;
  canBecomeMainWindow(): boolean;
  worksWhenModal(): boolean;
  preventsApplicationTerminationWhenModal(): boolean;
  setPreventsApplicationTerminationWhenModal(preventsApplicationTerminationWhenModal: boolean): void;
  backingScaleFactor(): CGFloat;
  allowsToolTipsWhenApplicationIsInactive(): boolean;
  setAllowsToolTipsWhenApplicationIsInactive(allowsToolTipsWhenApplicationIsInactive: boolean): void;
  backingType(): NSBackingStoreType;
  setBackingType(backingType: NSBackingStoreType): void;
  level(): NSWindowLevel;
  setLevel(level: NSWindowLevel): void;
  depthLimit(): NSWindowDepth;
  setDepthLimit(depthLimit: NSWindowDepth): void;
  hasDynamicDepthLimit(): boolean;
  screen(): NSScreen;
  deepestScreen(): NSScreen;
  hasShadow(): boolean;
  setHasShadow(hasShadow: boolean): void;
  alphaValue(): CGFloat;
  setAlphaValue(alphaValue: CGFloat): void;
  opaque(): boolean;
  setOpaque(opaque: boolean): void;
  sharingType(): NSWindowSharingType;
  setSharingType(sharingType: NSWindowSharingType): void;
  allowsConcurrentViewDrawing(): boolean;
  setAllowsConcurrentViewDrawing(allowsConcurrentViewDrawing: boolean): void;
  displaysWhenScreenProfileChanges(): boolean;
  setDisplaysWhenScreenProfileChanges(displaysWhenScreenProfileChanges: boolean): void;
  canBecomeVisibleWithoutLogin(): boolean;
  setCanBecomeVisibleWithoutLogin(canBecomeVisibleWithoutLogin: boolean): void;
  collectionBehavior(): NSWindowCollectionBehavior;
  setCollectionBehavior(collectionBehavior: NSWindowCollectionBehavior): void;
  animationBehavior(): NSWindowAnimationBehavior;
  setAnimationBehavior(animationBehavior: NSWindowAnimationBehavior): void;
  onActiveSpace(): boolean;
  stringWithSavedFrame(): NSWindowPersistableFrameDescriptor;
  frameAutosaveName(): NSWindowFrameAutosaveName;
  minSize(): NSSize;
  setMinSize(minSize: NSSize): void;
  maxSize(): NSSize;
  setMaxSize(maxSize: NSSize): void;
  contentMinSize(): NSSize;
  setContentMinSize(contentMinSize: NSSize): void;
  contentMaxSize(): NSSize;
  setContentMaxSize(contentMaxSize: NSSize): void;
  minFullScreenContentSize(): NSSize;
  setMinFullScreenContentSize(minFullScreenContentSize: NSSize): void;
  maxFullScreenContentSize(): NSSize;
  setMaxFullScreenContentSize(maxFullScreenContentSize: NSSize): void;
  deviceDescription(): NSDictionary<any, any>;
  windowController(): NSWindowController;
  setWindowController(windowController: NSWindowController): void;
  sheets(): NSArray<any>;
  attachedSheet(): NSWindow;
  sheet(): boolean;
  sheetParent(): NSWindow;
  childWindows(): NSArray<any>;
  parentWindow(): NSWindow;
  setParentWindow(parentWindow: NSWindow): void;
  appearanceSource(): NSObject;
  setAppearanceSource(appearanceSource: NSObject): void;
  colorSpace(): NSColorSpace;
  setColorSpace(colorSpace: NSColorSpace): void;
  occlusionState(): NSWindowOcclusionState;
  contentViewController(): NSViewController;
  setContentViewController(contentViewController: NSViewController): void;
  initialFirstResponder(): NSView;
  setInitialFirstResponder(initialFirstResponder: NSView): void;
  keyViewSelectionDirection(): NSSelectionDirection;
  defaultButtonCell(): NSButtonCell;
  setDefaultButtonCell(defaultButtonCell: NSButtonCell): void;
  autorecalculatesKeyViewLoop(): boolean;
  setAutorecalculatesKeyViewLoop(autorecalculatesKeyViewLoop: boolean): void;
  toolbar(): NSToolbar;
  setToolbar(toolbar: NSToolbar): void;
  showsToolbarButton(): boolean;
  setShowsToolbarButton(showsToolbarButton: boolean): void;
  tabbingMode(): NSWindowTabbingMode;
  setTabbingMode(tabbingMode: NSWindowTabbingMode): void;
  tabbingIdentifier(): NSWindowTabbingIdentifier;
  setTabbingIdentifier(tabbingIdentifier: NSWindowTabbingIdentifier): void;
  tabbedWindows(): NSArray<any>;
  tab(): NSWindowTab;
  tabGroup(): NSWindowTabGroup;
  windowTitlebarLayoutDirection(): NSUserInterfaceLayoutDirection;
  currentEvent(): NSEvent;
  acceptsMouseMovedEvents(): boolean;
  setAcceptsMouseMovedEvents(acceptsMouseMovedEvents: boolean): void;
  ignoresMouseEvents(): boolean;
  setIgnoresMouseEvents(ignoresMouseEvents: boolean): void;
  mouseLocationOutsideOfEventStream(): NSPoint;
  areCursorRectsEnabled(): boolean;
  windowRef(): void;
  flushWindowDisabled(): boolean;
  autodisplay(): boolean;
  setAutodisplay(autodisplay: boolean): void;
  graphicsContext(): NSGraphicsContext;
  oneShot(): boolean;
  setOneShot(oneShot: boolean): void;
  preferredBackingLocation(): NSWindowBackingLocation;
  setPreferredBackingLocation(preferredBackingLocation: NSWindowBackingLocation): void;
  backingLocation(): NSWindowBackingLocation;
  showsResizeIndicator(): boolean;
  setShowsResizeIndicator(showsResizeIndicator: boolean): void;
  restorable(): boolean;
  setRestorable(restorable: boolean): void;
  restorationClass(): any;
  setRestorationClass(restorationClass: any): void;
  hasCloseBox(): boolean;
  hasTitleBar(): boolean;
  floatingPanel(): boolean;
  miniaturizable(): boolean;
  modalPanel(): boolean;
  resizable(): boolean;
  zoomable(): boolean;
  orderedIndex(): NSInteger;
  setOrderedIndex(orderedIndex: NSInteger): void;
}
declare const NSWindow: {
  alloc(): NSWindowUninitialized;
  class(): NSWindow;  frameRectForContentRect_styleMask(cRect: NSRect, style: NSWindowStyleMask): NSRect;
  contentRectForFrameRect_styleMask(fRect: NSRect, style: NSWindowStyleMask): NSRect;
  minFrameWidthWithTitle_styleMask(title: NSString | string, style: NSWindowStyleMask): CGFloat;
  removeFrameUsingName(name: NSWindowFrameAutosaveName): void;
  standardWindowButton_forStyleMask(b: NSWindowButton, styleMask: NSWindowStyleMask): NSButton;
  windowNumbersWithOptions(options: NSWindowNumberListOptions): NSArray<any>;
  windowNumberAtPoint_belowWindowWithWindowNumber(point: NSPoint, windowNumber: NSInteger): NSInteger;
  windowWithContentViewController(contentViewController: NSViewController): NSWindow;
  menuChanged(menu: NSMenu): void;

  defaultDepthLimit(): NSWindowDepth;
  allowsAutomaticWindowTabbing(): boolean;
  setAllowsAutomaticWindowTabbing(allowsAutomaticWindowTabbing: boolean): void;
  userTabbingPreference(): NSWindowUserTabbingPreference;

}

