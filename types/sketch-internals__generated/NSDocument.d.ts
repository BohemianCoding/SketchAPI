interface NSDocumentUninitialized<InitializedType = NSDocument> extends NSObjectUninitialized<NSDocument> {
  initWithType_error(typeName: NSString | string, outError: MOPointer<NSError>): InitializedType;
  initWithContentsOfURL_ofType_error(url: NSURL, typeName: NSString | string, outError: MOPointer<NSError>): InitializedType;
  initForURL_withContentsOfURL_ofType_error(urlOrNil: NSURL | null, contentsURL: NSURL, typeName: NSString | string, outError: MOPointer<NSError>): InitializedType;
  initWithContentsOfFile_ofType(absolutePath: NSString | string, typeName: NSString | string): InitializedType;
  initWithContentsOfURL_ofType(url: NSURL, typeName: NSString | string): InitializedType;
}

interface NSDocument extends NSObject, INSEditorRegistration, INSFilePresenter, INSMenuItemValidation, INSUserInterfaceValidations {
  performActivityWithSynchronousWaiting_usingBlock(waitSynchronously: boolean, block: Block): void;
  continueActivityUsingBlock(block: Block): void;
  continueAsynchronousWorkOnMainThreadUsingBlock(block: Block): void;
  performSynchronousFileAccessUsingBlock(block: Block): void;
  performAsynchronousFileAccessUsingBlock(block: Block): void;
  revertDocumentToSaved(sender: any | null): IBAction;
  revertToContentsOfURL_ofType_error(url: NSURL, typeName: NSString | string, outError: MOPointer<NSError>): boolean;
  readFromURL_ofType_error(url: NSURL, typeName: NSString | string, outError: MOPointer<NSError>): boolean;
  readFromFileWrapper_ofType_error(fileWrapper: NSFileWrapper, typeName: NSString | string, outError: MOPointer<NSError>): boolean;
  readFromData_ofType_error(data: NSData, typeName: NSString | string, outError: MOPointer<NSError>): boolean;
  writeToURL_ofType_error(url: NSURL, typeName: NSString | string, outError: MOPointer<NSError>): boolean;
  fileWrapperOfType_error(typeName: NSString | string, outError: MOPointer<NSError>): NSFileWrapper;
  dataOfType_error(typeName: NSString | string, outError: MOPointer<NSError>): NSData;
  unblockUserInteraction(): void;
  writeSafelyToURL_ofType_forSaveOperation_error(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, outError: MOPointer<NSError>): boolean;
  writeToURL_ofType_forSaveOperation_originalContentsURL_error(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, absoluteOriginalContentsURL: NSURL | null, outError: MOPointer<NSError>): boolean;
  fileAttributesToWriteToURL_ofType_forSaveOperation_originalContentsURL_error(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, absoluteOriginalContentsURL: NSURL | null, outError: MOPointer<NSError>): NSDictionary<any, any>;
  saveDocument(sender: any | null): IBAction;
  saveDocumentAs(sender: any | null): IBAction;
  saveDocumentTo(sender: any | null): IBAction;
  saveDocumentWithDelegate_didSaveSelector_contextInfo(delegate: any | null, didSaveSelector: string | null, contextInfo: void | null): void;
  runModalSavePanelForSaveOperation_delegate_didSaveSelector_contextInfo(saveOperation: NSSaveOperationType, delegate: any | null, didSaveSelector: string | null, contextInfo: void | null): void;
  prepareSavePanel(savePanel: NSSavePanel): boolean;
  saveToURL_ofType_forSaveOperation_delegate_didSaveSelector_contextInfo(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, delegate: any | null, didSaveSelector: string | null, contextInfo: void | null): void;
  saveToURL_ofType_forSaveOperation_completionHandler(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, completionHandler: Block): void;
  canAsynchronouslyWriteToURL_ofType_forSaveOperation(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType): boolean;
  checkAutosavingSafetyAndReturnError(outError: MOPointer<NSError>): boolean;
  scheduleAutosaving(): void;
  autosaveDocumentWithDelegate_didAutosaveSelector_contextInfo(delegate: any | null, didAutosaveSelector: string | null, contextInfo: void | null): void;
  autosaveWithImplicitCancellability_completionHandler(autosavingIsImplicitlyCancellable: boolean, completionHandler: Block): void;
  browseDocumentVersions(sender: any | null): IBAction;
  stopBrowsingVersionsWithCompletionHandler(completionHandler: Block): void;
  canCloseDocumentWithDelegate_shouldCloseSelector_contextInfo(delegate: any, shouldCloseSelector: string | null, contextInfo: void | null): void;
  close(): void;
  duplicateDocument(sender: any | null): IBAction;
  duplicateDocumentWithDelegate_didDuplicateSelector_contextInfo(delegate: any | null, didDuplicateSelector: string | null, contextInfo: void | null): void;
  duplicateAndReturnError(outError: MOPointer<NSError>): NSDocument;
  renameDocument(sender: any | null): IBAction;
  moveDocumentToUbiquityContainer(sender: any | null): IBAction;
  moveDocument(sender: any | null): IBAction;
  moveDocumentWithCompletionHandler(completionHandler: Block): void;
  moveToURL_completionHandler(url: NSURL, completionHandler: Block): void;
  lockDocument(sender: any | null): IBAction;
  unlockDocument(sender: any | null): IBAction;
  lockDocumentWithCompletionHandler(completionHandler: Block): void;
  lockWithCompletionHandler(completionHandler: Block): void;
  unlockDocumentWithCompletionHandler(completionHandler: Block): void;
  unlockWithCompletionHandler(completionHandler: Block): void;
  runPageLayout(sender: any | null): IBAction;
  runModalPageLayoutWithPrintInfo_delegate_didRunSelector_contextInfo(printInfo: NSPrintInfo, delegate: any | null, didRunSelector: string | null, contextInfo: void | null): void;
  preparePageLayout(pageLayout: NSPageLayout): boolean;
  shouldChangePrintInfo(newPrintInfo: NSPrintInfo): boolean;
  printDocument(sender: any | null): IBAction;
  printDocumentWithSettings_showPrintPanel_delegate_didPrintSelector_contextInfo(printSettings: NSDictionary<any, any> | {[key: string]: any}, showPrintPanel: boolean, delegate: any | null, didPrintSelector: string | null, contextInfo: void | null): void;
  printOperationWithSettings_error(printSettings: NSDictionary<any, any> | {[key: string]: any}, outError: MOPointer<NSError>): NSPrintOperation;
  runModalPrintOperation_delegate_didRunSelector_contextInfo(printOperation: NSPrintOperation, delegate: any | null, didRunSelector: string | null, contextInfo: void | null): void;
  saveDocumentToPDF(sender: any | null): IBAction;
  shareDocumentWithSharingService_completionHandler(sharingService: NSSharingService, completionHandler: Block): void;
  prepareSharingServicePicker(sharingServicePicker: NSSharingServicePicker): void;
  updateChangeCount(change: NSDocumentChangeType): void;
  changeCountTokenForSaveOperation(saveOperation: NSSaveOperationType): any;
  updateChangeCountWithToken_forSaveOperation(changeCountToken: any, saveOperation: NSSaveOperationType): void;
  presentError_modalForWindow_delegate_didPresentSelector_contextInfo(error: NSError, window: NSWindow, delegate: any | null, didPresentSelector: string | null, contextInfo: void | null): void;
  presentError(error: NSError): boolean;
  willPresentError(error: NSError): NSError;
  willNotPresentError(error: NSError): void;
  makeWindowControllers(): void;
  windowControllerWillLoadNib(windowController: NSWindowController): void;
  windowControllerDidLoadNib(windowController: NSWindowController): void;
  setWindow(window: NSWindow | null): void;
  addWindowController(windowController: NSWindowController): void;
  removeWindowController(windowController: NSWindowController): void;
  showWindows(): void;
  shouldCloseWindowController_delegate_shouldCloseSelector_contextInfo(windowController: NSWindowController, delegate: any | null, shouldCloseSelector: string | null, contextInfo: void | null): void;
  setDisplayName(displayNameOrNil: NSString | string | null): void;
  defaultDraftName(): NSString;
  writableTypesForSaveOperation(saveOperation: NSSaveOperationType): NSArray<any>;
  fileNameExtensionForType_saveOperation(typeName: NSString | string, saveOperation: NSSaveOperationType): NSString;
  validateUserInterfaceItem(item: any): boolean;
  saveToURL_ofType_forSaveOperation_error(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, outError: MOPointer<NSError>): boolean;
  dataRepresentationOfType(type: NSString | string): NSData;
  fileAttributesToWriteToFile_ofType_saveOperation(fullDocumentPath: NSString | string, documentTypeName: NSString | string, saveOperationType: NSSaveOperationType): NSDictionary<any, any>;
  fileName(): NSString;
  fileWrapperRepresentationOfType(type: NSString | string): NSFileWrapper;
  loadDataRepresentation_ofType(data: NSData, type: NSString | string): boolean;
  loadFileWrapperRepresentation_ofType(wrapper: NSFileWrapper, type: NSString | string): boolean;
  printShowingPrintPanel(flag: boolean): void;
  readFromFile_ofType(fileName: NSString | string, type: NSString | string): boolean;
  readFromURL_ofType(url: NSURL, type: NSString | string): boolean;
  revertToSavedFromFile_ofType(fileName: NSString | string, type: NSString | string): boolean;
  revertToSavedFromURL_ofType(url: NSURL, type: NSString | string): boolean;
  runModalPageLayoutWithPrintInfo(printInfo: NSPrintInfo): NSInteger;
  saveToFile_saveOperation_delegate_didSaveSelector_contextInfo(fileName: NSString | string, saveOperation: NSSaveOperationType, delegate: any | null, didSaveSelector: string | null, contextInfo: void | null): void;
  setFileName(fileName: NSString | string | null): void;
  writeToFile_ofType(fileName: NSString | string, type: NSString | string): boolean;
  writeToFile_ofType_originalFile_saveOperation(fullDocumentPath: NSString | string, documentTypeName: NSString | string, fullOriginalDocumentPath: NSString | string | null, saveOperationType: NSSaveOperationType): boolean;
  writeToURL_ofType(url: NSURL, type: NSString | string): boolean;
  writeWithBackupToFile_ofType_saveOperation(fullDocumentPath: NSString | string, documentTypeName: NSString | string, saveOperationType: NSSaveOperationType): boolean;
  handleSaveScriptCommand(command: NSScriptCommand): any;
  handleCloseScriptCommand(command: NSCloseCommand): any;
  handlePrintScriptCommand(command: NSScriptCommand): any;
  updateUserActivityState(activity: NSUserActivity): void;
  restoreDocumentWindowWithIdentifier_state_completionHandler(identifier: NSUserInterfaceItemIdentifier, state: NSCoder, completionHandler: Block): void;
  encodeRestorableStateWithCoder(coder: NSCoder): void;
  encodeRestorableStateWithCoder_backgroundQueue(coder: NSCoder, queue: NSOperationQueue): void;
  restoreStateWithCoder(coder: NSCoder): void;
  invalidateRestorableState(): void;
  menuNeedsUpdate(menu: NSMenu): void;
  objectDidBeginEditing(editor: any): void;
  objectDidEndEditing(editor: any): void;
  relinquishPresentedItemToReader(reader: Block): void;
  relinquishPresentedItemToWriter(writer: Block): void;
  savePresentedItemChangesWithCompletionHandler(completionHandler: Block): void;
  accommodatePresentedItemDeletionWithCompletionHandler(completionHandler: Block): void;
  presentedItemDidMoveToURL(newURL: NSURL): void;
  presentedItemDidChange(): void;
  presentedItemDidChangeUbiquityAttributes(attributes: NSSet<any>): void;
  presentedItemDidGainVersion(version: NSFileVersion): void;
  presentedItemDidLoseVersion(version: NSFileVersion): void;
  presentedItemDidResolveConflictVersion(version: NSFileVersion): void;
  accommodatePresentedSubitemDeletionAtURL_completionHandler(url: NSURL, completionHandler: Block): void;
  presentedSubitemDidAppearAtURL(url: NSURL): void;
  presentedSubitemAtURL_didMoveToURL(oldURL: NSURL, newURL: NSURL): void;
  presentedSubitemDidChangeAtURL(url: NSURL): void;
  presentedSubitemAtURL_didGainVersion(url: NSURL, version: NSFileVersion): void;
  presentedSubitemAtURL_didLoseVersion(url: NSURL, version: NSFileVersion): void;
  presentedSubitemAtURL_didResolveConflictVersion(url: NSURL, version: NSFileVersion): void;
  validateMenuItem(menuItem: NSMenuItem): boolean;
  validateUserInterfaceItem(item: any): boolean;

  fileType(): NSString;
  setFileType(fileType: NSString | string): void;
  fileURL(): NSURL;
  setFileURL(fileURL: NSURL): void;
  fileModificationDate(): NSDate;
  setFileModificationDate(fileModificationDate: NSDate): void;
  draft(): boolean;
  setDraft(draft: boolean): void;
  entireFileLoaded(): boolean;
  autosavingIsImplicitlyCancellable(): boolean;
  keepBackupFile(): boolean;
  backupFileURL(): NSURL;
  shouldRunSavePanelWithAccessoryView(): boolean;
  fileNameExtensionWasHiddenInLastRunSavePanel(): boolean;
  fileTypeFromLastRunSavePanel(): NSString;
  hasUnautosavedChanges(): boolean;
  browsingVersions(): boolean;
  autosavingFileType(): NSString;
  autosavedContentsFileURL(): NSURL;
  setAutosavedContentsFileURL(autosavedContentsFileURL: NSURL): void;
  locked(): boolean;
  printInfo(): NSPrintInfo;
  setPrintInfo(printInfo: NSPrintInfo): void;
  PDFPrintOperation(): NSPrintOperation;
  allowsDocumentSharing(): boolean;
  documentEdited(): boolean;
  inViewingMode(): boolean;
  undoManager(): NSUndoManager;
  setUndoManager(undoManager: NSUndoManager): void;
  hasUndoManager(): boolean;
  setHasUndoManager(hasUndoManager: boolean): void;
  windowNibName(): NSNibName;
  windowControllers(): NSArray<any>;
  displayName(): NSString;
  setDisplayName(displayName: NSString | string): void;
  windowForSheet(): NSWindow;
  lastComponentOfFileName(): NSString;
  setLastComponentOfFileName(lastComponentOfFileName: NSString | string): void;
  objectSpecifier(): NSScriptObjectSpecifier;
  userActivity(): NSUserActivity;
  setUserActivity(userActivity: NSUserActivity): void;
  presentedItemURL(): NSURL;
  presentedItemOperationQueue(): NSOperationQueue;
  primaryPresentedItemURL(): NSURL;
  observedPresentedItemUbiquityAttributes(): NSSet<any>;
}

declare const NSDocument: {
  alloc(): NSDocumentUninitialized;
  class(): NSDocument;
  canConcurrentlyReadDocumentsOfType(typeName: NSString | string): boolean;
  isNativeType(type: NSString | string): boolean;
  load(): void;
  instancesRespondToSelector(aSelector: string): boolean;
  conformsToProtocol(protocol: Protocol): boolean;
  instanceMethodForSelector(aSelector: string): IMP;
  isSubclassOfClass(aClass: any): boolean;
  hash(): NSUInteger;
  superclass(): any;
  description(): NSString;
  debugDescription(): NSString;
  useStoredAccessor(): boolean;
  keyPathsForValuesAffectingValueForKey(key: NSString | string): NSSet<any>;
  automaticallyNotifiesObserversForKey(key: NSString | string): boolean;
  setKeys_triggerChangeNotificationsForDependentKey(keys: NSArray<any> | any[], dependentKey: NSString | string): void;
  classFallbacksForKeyedArchiver(): NSArray<any>;
  classForKeyedUnarchiver(): any;
  version(): NSInteger;
  setVersion(aVersion: NSInteger): void;
  cancelPreviousPerformRequestsWithTarget_selector_object(aTarget: any, aSelector: string, anArgument: any | null): void;
  cancelPreviousPerformRequestsWithTarget(aTarget: any): void;
  exposeBinding(binding: NSBindingName): void;
  setDefaultPlaceholder_forMarker_withBinding(placeholder: any | null, marker: any | null, binding: NSBindingName): void;
  defaultPlaceholderForMarker_withBinding(marker: any | null, binding: NSBindingName): any;
  mo_swizzleAdditions(): void;
  mo_mocha(): MOClassDescription;
  isSelectorExcludedFromMochaScript(selector: string): boolean;
  selectorForMochaPropertyName(propertyName: NSString | string): string;
  autosavesInPlace(): boolean;
  preservesVersions(): boolean;
  autosavesDrafts(): boolean;
  readableTypes(): NSArray<any>;
  writableTypes(): NSArray<any>;
  usesUbiquitousStorage(): boolean;
  restorableStateKeyPaths(): NSArray<any>;
  accessInstanceVariablesDirectly(): boolean;

}

