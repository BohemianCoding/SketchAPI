interface NSViewUninitialized<InitializedType = NSView> extends NSResponderUninitialized<NSView> {
  initWithFrame(frameRect: NSRect): InitializedType;
}
interface NSView extends NSResponder, INSAnimatablePropertyContainer, INSUserInterfaceItemIdentification, INSDraggingDestination, INSAppearanceCustomization, INSAccessibilityElement, INSAccessibility {
  reflectScrolledClipView(clipView: NSClipView): void;
  scrollClipView_toPoint(clipView: NSClipView, point: NSPoint): void;
  addConstraint(constraint: NSLayoutConstraint): void;
  addConstraints(constraints: NSArray<any> | any[]): void;
  removeConstraint(constraint: NSLayoutConstraint): void;
  removeConstraints(constraints: NSArray<any> | any[]): void;
  updateConstraintsForSubtreeIfNeeded(): void;
  layoutSubtreeIfNeeded(): void;
  layout(): void;
  alignmentRectForFrame(frame: NSRect): NSRect;
  frameForAlignmentRect(alignmentRect: NSRect): NSRect;
  invalidateIntrinsicContentSize(): void;
  contentHuggingPriorityForOrientation(orientation: NSLayoutConstraintOrientation): NSLayoutPriority;
  setContentHuggingPriority_forOrientation(priority: NSLayoutPriority, orientation: NSLayoutConstraintOrientation): void;
  contentCompressionResistancePriorityForOrientation(orientation: NSLayoutConstraintOrientation): NSLayoutPriority;
  setContentCompressionResistancePriority_forOrientation(priority: NSLayoutPriority, orientation: NSLayoutConstraintOrientation): void;
  constraintsAffectingLayoutForOrientation(orientation: NSLayoutConstraintOrientation): NSArray<any>;
  exerciseAmbiguityInLayout(): void;
  addLayoutGuide(guide: NSLayoutGuide): void;
  removeLayoutGuide(guide: NSLayoutGuide): void;
  rulerView_shouldMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_willMoveMarker_toLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat): CGFloat;
  rulerView_didMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_shouldRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_didRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_shouldAddMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_willAddMarker_atLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat): CGFloat;
  rulerView_didAddMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_handleMouseDown(ruler: NSRulerView, event: NSEvent): void;
  rulerView_willSetClientView(ruler: NSRulerView, newClient: NSView): void;
  rulerView_locationForPoint(ruler: NSRulerView, point: NSPoint): CGFloat;
  rulerView_pointForLocation(ruler: NSRulerView, point: CGFloat): NSPoint;
  isDescendantOf(view: NSView): boolean;
  ancestorSharedWithView(view: NSView): NSView;
  getRectsBeingDrawn_count(rects: NSRect, count: NSInteger | null): void;
  needsToDrawRect(rect: NSRect): boolean;
  viewDidHide(): void;
  viewDidUnhide(): void;
  addSubview(view: NSView): void;
  addSubview_positioned_relativeTo(view: NSView, place: NSWindowOrderingMode, otherView: NSView | null): void;
  viewWillMoveToWindow(newWindow: NSWindow | null): void;
  viewDidMoveToWindow(): void;
  viewWillMoveToSuperview(newSuperview: NSView | null): void;
  viewDidMoveToSuperview(): void;
  didAddSubview(subview: NSView): void;
  willRemoveSubview(subview: NSView): void;
  removeFromSuperview(): void;
  replaceSubview_with(oldView: NSView, newView: NSView): void;
  removeFromSuperviewWithoutNeedingDisplay(): void;
  viewDidChangeBackingProperties(): void;
  resizeSubviewsWithOldSize(oldSize: NSSize): void;
  resizeWithOldSuperviewSize(oldSize: NSSize): void;
  setFrameOrigin(newOrigin: NSPoint): void;
  setFrameSize(newSize: NSSize): void;
  setBoundsOrigin(newOrigin: NSPoint): void;
  setBoundsSize(newSize: NSSize): void;
  translateOriginToPoint(translation: NSPoint): void;
  scaleUnitSquareToSize(newUnitSize: NSSize): void;
  rotateByAngle(angle: CGFloat): void;
  convertPoint_fromView(point: NSPoint, view: NSView | null): NSPoint;
  convertPoint_toView(point: NSPoint, view: NSView | null): NSPoint;
  convertSize_fromView(size: NSSize, view: NSView | null): NSSize;
  convertSize_toView(size: NSSize, view: NSView | null): NSSize;
  convertRect_fromView(rect: NSRect, view: NSView | null): NSRect;
  convertRect_toView(rect: NSRect, view: NSView | null): NSRect;
  backingAlignedRect_options(rect: NSRect, options: NSAlignmentOptions): NSRect;
  centerScanRect(rect: NSRect): NSRect;
  convertPointToBacking(point: NSPoint): NSPoint;
  convertPointFromBacking(point: NSPoint): NSPoint;
  convertSizeToBacking(size: NSSize): NSSize;
  convertSizeFromBacking(size: NSSize): NSSize;
  convertRectToBacking(rect: NSRect): NSRect;
  convertRectFromBacking(rect: NSRect): NSRect;
  convertPointToLayer(point: NSPoint): NSPoint;
  convertPointFromLayer(point: NSPoint): NSPoint;
  convertSizeToLayer(size: NSSize): NSSize;
  convertSizeFromLayer(size: NSSize): NSSize;
  convertRectToLayer(rect: NSRect): NSRect;
  convertRectFromLayer(rect: NSRect): NSRect;
  setNeedsDisplayInRect(invalidRect: NSRect): void;
  lockFocus(): void;
  unlockFocus(): void;
  lockFocusIfCanDraw(): boolean;
  lockFocusIfCanDrawInContext(context: NSGraphicsContext): boolean;
  display(): void;
  displayIfNeeded(): void;
  displayIfNeededIgnoringOpacity(): void;
  displayRect(rect: NSRect): void;
  displayIfNeededInRect(rect: NSRect): void;
  displayRectIgnoringOpacity(rect: NSRect): void;
  displayIfNeededInRectIgnoringOpacity(rect: NSRect): void;
  drawRect(dirtyRect: NSRect): void;
  displayRectIgnoringOpacity_inContext(rect: NSRect, context: NSGraphicsContext): void;
  bitmapImageRepForCachingDisplayInRect(rect: NSRect): NSBitmapImageRep;
  cacheDisplayInRect_toBitmapImageRep(rect: NSRect, bitmapImageRep: NSBitmapImageRep): void;
  viewWillDraw(): void;
  scrollPoint(point: NSPoint): void;
  scrollRectToVisible(rect: NSRect): boolean;
  autoscroll(event: NSEvent): boolean;
  adjustScroll(newVisible: NSRect): NSRect;
  scrollRect_by(rect: NSRect, delta: NSSize): void;
  translateRectsNeedingDisplayInRect_by(clipRect: NSRect, delta: NSSize): void;
  hitTest(point: NSPoint): NSView;
  mouse_inRect(point: NSPoint, rect: NSRect): boolean;
  viewWithTag(tag: NSInteger): NSView;
  performKeyEquivalent(event: NSEvent): boolean;
  acceptsFirstMouse(event: NSEvent | null): boolean;
  shouldDelayWindowOrderingForEvent(event: NSEvent): boolean;
  addCursorRect_cursor(rect: NSRect, object: NSCursor): void;
  removeCursorRect_cursor(rect: NSRect, object: NSCursor): void;
  discardCursorRects(): void;
  resetCursorRects(): void;
  addTrackingRect_owner_userData_assumeInside(rect: NSRect, owner: any, data: void | null, flag: boolean): NSTrackingRectTag;
  removeTrackingRect(tag: NSTrackingRectTag): void;
  makeBackingLayer(): CALayer;
  updateLayer(): void;
  addTrackingArea(trackingArea: NSTrackingArea): void;
  removeTrackingArea(trackingArea: NSTrackingArea): void;
  updateTrackingAreas(): void;
  menuForEvent(event: NSEvent): NSMenu;
  willOpenMenu_withEvent(menu: NSMenu, event: NSEvent): void;
  didCloseMenu_withEvent(menu: NSMenu, event: NSEvent | null): void;
  addToolTipRect_owner_userData(rect: NSRect, owner: any, data: void | null): NSToolTipTag;
  removeToolTip(tag: NSToolTipTag): void;
  removeAllToolTips(): void;
  viewWillStartLiveResize(): void;
  viewDidEndLiveResize(): void;
  getRectsExposedDuringLiveResize_count(exposedRects: [NSRect, NSRect, NSRect, NSRect], count: NSInteger): void;
  rectForSmartMagnificationAtPoint_inRect(location: NSPoint, visibleRect: NSRect): NSRect;
  prepareForReuse(): void;
  prepareContentInRect(rect: NSRect): void;
  viewDidChangeEffectiveAppearance(): void;
  setKeyboardFocusRingNeedsDisplayInRect(rect: NSRect): void;
  drawFocusRingMask(): void;
  noteFocusRingMaskChanged(): void;
  writeEPSInsideRect_toPasteboard(rect: NSRect, pasteboard: NSPasteboard): void;
  dataWithEPSInsideRect(rect: NSRect): NSData;
  writePDFInsideRect_toPasteboard(rect: NSRect, pasteboard: NSPasteboard): void;
  dataWithPDFInsideRect(rect: NSRect): NSData;
  print(sender: any | null): void;
  knowsPageRange(range: NSRangePointer): boolean;
  adjustPageWidthNew_left_right_limit(newRight: CGFloat, oldLeft: CGFloat, oldRight: CGFloat, rightLimit: CGFloat): void;
  adjustPageHeightNew_top_bottom_limit(newBottom: CGFloat, oldTop: CGFloat, oldBottom: CGFloat, bottomLimit: CGFloat): void;
  rectForPage(page: NSInteger): NSRect;
  locationOfPrintRect(rect: NSRect): NSPoint;
  drawPageBorderWithSize(borderSize: NSSize): void;
  drawSheetBorderWithSize(borderSize: NSSize): void;
  beginDocument(): void;
  endDocument(): void;
  beginPageInRect_atPlacement(rect: NSRect, location: NSPoint): void;
  endPage(): void;
  beginDraggingSessionWithItems_event_source(items: NSArray<any> | any[], event: NSEvent, source: any): NSDraggingSession;
  registerForDraggedTypes(newTypes: NSArray<any> | any[]): void;
  unregisterDraggedTypes(): void;
  enterFullScreenMode_withOptions(screen: NSScreen, options: NSDictionary<any, any> | {[key: string]: any} | null): boolean;
  exitFullScreenModeWithOptions(options: NSDictionary<any, any> | {[key: string]: any} | null): void;
  showDefinitionForAttributedString_atPoint(attrString: NSAttributedString | null, textBaselineOrigin: NSPoint): void;
  showDefinitionForAttributedString_range_options_baselineOriginProvider(attrString: NSAttributedString | null, targetRange: NSRange, options: NSDictionary<any, any> | {[key: string]: any} | null, originProvider: Block): void;
  addGestureRecognizer(gestureRecognizer: NSGestureRecognizer): void;
  removeGestureRecognizer(gestureRecognizer: NSGestureRecognizer): void;
  dragImage_at_offset_event_pasteboard_source_slideBack(image: NSImage, viewLocation: NSPoint, initialOffset: NSSize, event: NSEvent, pboard: NSPasteboard, sourceObj: any, slideFlag: boolean): void;
  dragFile_fromRect_slideBack_event(filename: NSString | string, rect: NSRect, flag: boolean, event: NSEvent): boolean;
  dragPromisedFilesOfTypes_fromRect_source_slideBack_event(typeArray: NSArray<any> | any[], rect: NSRect, sourceObject: any, flag: boolean, event: NSEvent): boolean;
  convertPointToBase(point: NSPoint): NSPoint;
  convertPointFromBase(point: NSPoint): NSPoint;
  convertSizeToBase(size: NSSize): NSSize;
  convertSizeFromBase(size: NSSize): NSSize;
  convertRectToBase(rect: NSRect): NSRect;
  convertRectFromBase(rect: NSRect): NSRect;
  performMnemonic(string: NSString | string): boolean;
  shouldDrawColor(): boolean;
  gState(): NSInteger;
  allocateGState(): void;
  releaseGState(): void;
  setUpGState(): void;
  renewGState(): void;
  addSubview_constrainedBy_priority(subview: NSView, insets: NSEdgeInsets, priority: NSLayoutPriority): void;
  constrainHeight(height: CGFloat): void;
  constrainHeight_priority(height: CGFloat, priority: NSLayoutPriority): void;
  constrainWidth(width: CGFloat): void;
  constrainWidth_priority(width: CGFloat, priority: NSLayoutPriority): void;
  heightConstraint(): NSLayoutConstraint;
  hideWithZeroHeight(): void;
  hideWithZeroWidth(): void;
  showWithHeight(height: CGFloat): void;
  showWithWidth(width: CGFloat): void;
  horizontalConstraintWithView(anotherView: NSView): NSLayoutConstraint;
  horizontalConstraintsWithView(anotherView: NSView): NSArray<any>;
  verticalConstraintWithView(anotherView: NSView): NSLayoutConstraint;
  verticalConstraintsWithView(anotherView: NSView): NSArray<any>;
  widthConstraint(): NSLayoutConstraint;
  setFrameHeight(height: CGFloat): void;
  setFrameWidth(width: CGFloat): void;
  setFrameOriginX(x: CGFloat): void;
  setFrameOriginY(y: CGFloat): void;
  setNeedsDisplay(): void;
  imageRepresentation(): NSImage;
  beginDragFromEvent_image_type_data(event: NSEvent, image: NSImage, type: NSString | string, propertyListData: any): void;
  beginDragFromEvent_image_writersBlock(event: NSEvent, image: NSImage, block: MSPasteboardItemWritingBlock): void;
  containingAncestorViewOfClass(ancestorViewClass: any): NSView;
  isContainedByCollapsedSplitViewSubview(): boolean;
  nestedSubviewWithIdentifier(identifer: NSUserInterfaceItemIdentifier): NSView;
  animateToFrameOrigin_completionBlock(origin: NSPoint, block: MSAnimationBlock): void;
  animateToFrameOriginX_completionBlock(x: NSInteger, block: MSAnimationBlock): void;
  animateToFrameOriginX(x: NSInteger): void;
  subViewsForResponderFixer(): NSArray<any>;
  enclosingStackView(): MSInspectorStackView;
  viewHistoryMaker(): MSHistoryMaker;
  clickShouldDismissPopover(popover: BCPopover): boolean;
  wantsSeparatorBetweenSelfAndView(view: NSView): boolean;
  separatorInsetBetweenSelfAndView(view: NSView): NSEdgeInsets;

  candidateListTouchBarItem(): NSCandidateListTouchBarItem<any>;
  leadingAnchor(): NSLayoutXAxisAnchor;
  trailingAnchor(): NSLayoutXAxisAnchor;
  leftAnchor(): NSLayoutXAxisAnchor;
  rightAnchor(): NSLayoutXAxisAnchor;
  topAnchor(): NSLayoutYAxisAnchor;
  bottomAnchor(): NSLayoutYAxisAnchor;
  widthAnchor(): NSLayoutDimension;
  heightAnchor(): NSLayoutDimension;
  centerXAnchor(): NSLayoutXAxisAnchor;
  centerYAnchor(): NSLayoutYAxisAnchor;
  firstBaselineAnchor(): NSLayoutYAxisAnchor;
  lastBaselineAnchor(): NSLayoutYAxisAnchor;
  constraints(): NSArray<any>;
  needsUpdateConstraints(): boolean;
  setNeedsUpdateConstraints(needsUpdateConstraints: boolean): void;
  needsLayout(): boolean;
  setNeedsLayout(needsLayout: boolean): void;
  translatesAutoresizingMaskIntoConstraints(): boolean;
  setTranslatesAutoresizingMaskIntoConstraints(translatesAutoresizingMaskIntoConstraints: boolean): void;
  alignmentRectInsets(): NSEdgeInsets;
  firstBaselineOffsetFromTop(): CGFloat;
  lastBaselineOffsetFromBottom(): CGFloat;
  baselineOffsetFromBottom(): CGFloat;
  intrinsicContentSize(): NSSize;
  fittingSize(): NSSize;
  hasAmbiguousLayout(): boolean;
  layoutGuides(): NSArray<any>;
  enclosingMenuItem(): NSMenuItem;
  wantsBestResolutionOpenGLSurface(): boolean;
  setWantsBestResolutionOpenGLSurface(wantsBestResolutionOpenGLSurface: boolean): void;
  wantsExtendedDynamicRangeOpenGLSurface(): boolean;
  setWantsExtendedDynamicRangeOpenGLSurface(wantsExtendedDynamicRangeOpenGLSurface: boolean): void;
  pressureConfiguration(): NSPressureConfiguration;
  setPressureConfiguration(pressureConfiguration: NSPressureConfiguration): void;
  window(): NSWindow;
  superview(): NSView;
  subviews(): NSArray<any>;
  setSubviews(subviews: NSArray<any> | any[]): void;
  opaqueAncestor(): NSView;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
  hiddenOrHasHiddenAncestor(): boolean;
  wantsDefaultClipping(): boolean;
  postsFrameChangedNotifications(): boolean;
  setPostsFrameChangedNotifications(postsFrameChangedNotifications: boolean): void;
  autoresizesSubviews(): boolean;
  setAutoresizesSubviews(autoresizesSubviews: boolean): void;
  autoresizingMask(): NSAutoresizingMaskOptions;
  setAutoresizingMask(autoresizingMask: NSAutoresizingMaskOptions): void;
  frame(): NSRect;
  setFrame(frame: NSRect): void;
  frameRotation(): CGFloat;
  setFrameRotation(frameRotation: CGFloat): void;
  frameCenterRotation(): CGFloat;
  setFrameCenterRotation(frameCenterRotation: CGFloat): void;
  boundsRotation(): CGFloat;
  setBoundsRotation(boundsRotation: CGFloat): void;
  bounds(): NSRect;
  setBounds(bounds: NSRect): void;
  flipped(): boolean;
  rotatedFromBase(): boolean;
  rotatedOrScaledFromBase(): boolean;
  opaque(): boolean;
  canDrawConcurrently(): boolean;
  setCanDrawConcurrently(canDrawConcurrently: boolean): void;
  canDraw(): boolean;
  needsDisplay(): boolean;
  setNeedsDisplay(needsDisplay: boolean): void;
  visibleRect(): NSRect;
  tag(): NSInteger;
  needsPanelToBecomeKey(): boolean;
  mouseDownCanMoveWindow(): boolean;
  acceptsTouchEvents(): boolean;
  setAcceptsTouchEvents(acceptsTouchEvents: boolean): void;
  wantsRestingTouches(): boolean;
  setWantsRestingTouches(wantsRestingTouches: boolean): void;
  layerContentsRedrawPolicy(): NSViewLayerContentsRedrawPolicy;
  setLayerContentsRedrawPolicy(layerContentsRedrawPolicy: NSViewLayerContentsRedrawPolicy): void;
  layerContentsPlacement(): NSViewLayerContentsPlacement;
  setLayerContentsPlacement(layerContentsPlacement: NSViewLayerContentsPlacement): void;
  wantsLayer(): boolean;
  setWantsLayer(wantsLayer: boolean): void;
  layer(): CALayer;
  setLayer(layer: CALayer): void;
  wantsUpdateLayer(): boolean;
  canDrawSubviewsIntoLayer(): boolean;
  setCanDrawSubviewsIntoLayer(canDrawSubviewsIntoLayer: boolean): void;
  alphaValue(): CGFloat;
  setAlphaValue(alphaValue: CGFloat): void;
  layerUsesCoreImageFilters(): boolean;
  setLayerUsesCoreImageFilters(layerUsesCoreImageFilters: boolean): void;
  backgroundFilters(): NSArray<any>;
  setBackgroundFilters(backgroundFilters: NSArray<any> | any[]): void;
  compositingFilter(): CIFilter;
  setCompositingFilter(compositingFilter: CIFilter): void;
  contentFilters(): NSArray<any>;
  setContentFilters(contentFilters: NSArray<any> | any[]): void;
  shadow(): NSShadow;
  setShadow(shadow: NSShadow): void;
  trackingAreas(): NSArray<any>;
  postsBoundsChangedNotifications(): boolean;
  setPostsBoundsChangedNotifications(postsBoundsChangedNotifications: boolean): void;
  enclosingScrollView(): NSScrollView;
  toolTip(): NSString;
  setToolTip(toolTip: NSString | string): void;
  inLiveResize(): boolean;
  preservesContentDuringLiveResize(): boolean;
  rectPreservedDuringLiveResize(): NSRect;
  inputContext(): NSTextInputContext;
  userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
  setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection): void;
  preparedContentRect(): NSRect;
  setPreparedContentRect(preparedContentRect: NSRect): void;
  allowsVibrancy(): boolean;
  nextKeyView(): NSView;
  setNextKeyView(nextKeyView: NSView): void;
  previousKeyView(): NSView;
  nextValidKeyView(): NSView;
  previousValidKeyView(): NSView;
  canBecomeKeyView(): boolean;
  focusRingType(): NSFocusRingType;
  setFocusRingType(focusRingType: NSFocusRingType): void;
  focusRingMaskBounds(): NSRect;
  heightAdjustLimit(): CGFloat;
  widthAdjustLimit(): CGFloat;
  pageHeader(): NSAttributedString;
  pageFooter(): NSAttributedString;
  printJobTitle(): NSString;
  registeredDraggedTypes(): NSArray<any>;
  inFullScreenMode(): boolean;
  drawingFindIndicator(): boolean;
  gestureRecognizers(): NSArray<any>;
  setGestureRecognizers(gestureRecognizers: NSArray<any> | any[]): void;
  allowedTouchTypes(): NSTouchTypeMask;
  setAllowedTouchTypes(allowedTouchTypes: NSTouchTypeMask): void;
  dropDelegate_bc(): NSObject;
  setDropDelegate_bc(dropDelegate_bc: NSObject): void;
  allSubviews(): NSArray<any>;
  canBeKeyView(): boolean;
  wantsSeparator(): boolean;
}
declare const NSView: {
  alloc(): NSViewUninitialized;
  class(): NSView;
  requiresConstraintBasedLayout(): boolean;
  focusView(): NSView;
  defaultMenu(): NSMenu;
  compatibleWithResponsiveScrolling(): boolean;
  defaultFocusRingType(): NSFocusRingType;

}

