interface MSDocumentUninitialized<InitializedType = MSDocument> extends NSDocumentUninitialized<MSDocument> {}
interface MSDocument extends NSDocument, INSMenuDelegate, INSToolbarDelegate, INSWindowDelegate, IMSEventHandlerManagerDelegate, IMSDocumentDataDelegate, IMSMenuBuilderDelegate {
  actionClasses(): NSArray<any>;
  addLayerFromImageAtURL_toGroup_fitPixels_error(fileURL: NSURL, group: MSLayerGroup, fitPixels: boolean, outError: NSError): MSLayer;
  askForUserInput_initialValue(label: NSString | string, defaultString: NSString | string): NSString;
  askForUserInput_ofType_initialValue(label: NSString | string, type: NSInteger, defaultString: NSString | string): NSString;
  saveArtboardOrSlice_toFile(artboardOrSlice: any, filename: NSString | string): void;
  dataForRequest_ofType(request: MSExportRequest, extension: NSString | string): NSData;
  showMessage(message: NSString | string): void;
  pluginContext(): NSDictionary<any, any>;
  saveDocumentToURL_saveMode_context_callback(url: NSURL, saveMode: NSSaveOperationType, coscript: COScript, callback: MOJavaScriptObject | Function): void;
  contentDrawView(): MSContentDrawView;
  window(): NSWindow;
  updateFocusedArtboard(newArtboard: MSArtboardGroup): void;
  selectedLayers(): MSLayerArray;
  changeToImmutableDocumentData_selecting_onPage(documentData: MSImmutableDocumentData, selection: NSSet<any>, pageID: NSString | string): void;
  commitHistoryIfNecessary(sender: any): void;
  currentPage(): MSPage;
  validateMenuItem(item: NSMenuItem): boolean;
  toolbar(): NSToolbar;
  selectToolbarItemWithIdentifier(anIdentifier: NSString | string): void;
  createActions(): void;
  shouldCreateToolbar(): boolean;
  resetDocumentData(newData: MSDocumentData): void;
  deleteSymbolMasters(array: NSArray<any> | any[]): void;
  setCurrentPage(page: any): void;
  refreshSidebarWithMask(mask: BCSideBarRefreshType): void;
  updateFilterSettings(): void;
  reloadInspector(): void;
  scheduleReloadInspector(): void;
  contentDrawViewWillDraw(view: MSContentDrawView): void;
  renderStartedIn(view: MSContentDrawView): void;
  reloadView(): void;
  refreshWindowBadge(): void;
  layerStyles(): MSSharedStyleContainer;
  pages(): NSArray<any>;
  isLayerListVisible(): boolean;
  isInspectorVisible(): boolean;
  toggleClickThrough(sender: any): IBAction;
  exportSliceLayers(sliceLayers: NSArray<any> | any[]): void;
  allExportableLayers(): NSArray<any>;
  addBlankPage(): MSPage;
  removePage(page: MSPage): void;
  hasArtboards(): boolean;
  isRulersVisible(): boolean;
  layerPositionPossiblyChanged(): void;
  zoomValueDidChange(): void;
  debugCountObjects(sender: any): IBAction;
  isShowingMeasurements(): boolean;
  visitSymbolMaster_withReturnInstance(symbol: MSSymbolMaster, instance: MSSymbolInstance): void;
  openLibrariesForForeignObjects(objects: NSArray<any> | any[]): void;
  restoreViewportAfterArtboardEdit(artboard: MSArtboardGroup): void;
  removeViewportForArtboard(artboard: MSArtboardGroup): void;
  canRestoreViewportAfterArtboardEdit(artboard: MSArtboardGroup): boolean;
  reloadTouchBars(): void;
  localObjectForObjectReference(ref: MSShareableObjectReference): MSShareableObject;
  symbolReferenceForRecipe(recipe: MSSymbolMasterReferenceDescriptor): MSSymbolMasterReference;
  showNonDefaultColorSpaceWarningIfApplicable(): void;
  returnToDefaultFirstResponder(): void;
  installedFontsDidChange(): void;
  historyMaker_didApplyHistoryUpdate(maker: MSHistoryMaker, update: MSHistoryUpdate): void;
  historyMakerDidRevertHistory(maker: MSHistoryMaker): void;
  historyMakerDidProgressHistory(maker: MSHistoryMaker): void;

  cloudShare(): SCKShare;
  setCloudShare(cloudShare: SCKShare): void;
  cloudName(): NSString;
  documentWindow(): NSWindow;
  setDocumentWindow(documentWindow: NSWindow): void;
  messageView(): NSView;
  setMessageView(messageView: NSView): void;
  splitViewController(): MSMainSplitViewController;
  setSplitViewController(splitViewController: MSMainSplitViewController): void;
  toolbarConstructor(): MSToolbarConstructor;
  setToolbarConstructor(toolbarConstructor: MSToolbarConstructor): void;
  actionsController(): MSActionController;
  setActionsController(actionsController: MSActionController): void;
  badgeController(): MSBadgeController;
  documentData(): MSDocumentData;
  immutableDocumentData(): MSImmutableDocumentData;
  colorSpace(): NSColorSpace;
  canvasColorSpace(): NSColorSpace;
  eventHandlerManager(): MSEventHandlerManager;
  setEventHandlerManager(eventHandlerManager: MSEventHandlerManager): void;
  cacheManager(): MSCacheManager;
  historyMaker(): MSHistoryMaker;
  inspectorController(): MSInspectorController;
  setInspectorController(inspectorController: MSInspectorController): void;
  exportableLayerSelection(): NSArray<any>;
  setExportableLayerSelection(exportableLayerSelection: NSArray<any> | any[]): void;
  sidebarController(): BCSideBarViewController;
  setSidebarController(sidebarController: BCSideBarViewController): void;
  currentContentViewController(): MSContentDrawViewController;
  libraryController(): MSAssetLibraryController;
  nextReadFromURLIsReload(): boolean;
  setNextReadFromURLIsReload(nextReadFromURLIsReload: boolean): void;
  hasOpenedImageFile(): boolean;
  setHasOpenedImageFile(hasOpenedImageFile: boolean): void;
  UIMetadata(): NSDictionary<any, any>;
  setUIMetadata(UIMetadata: NSDictionary<any, any> | {[key: string]: any}): void;
  scrollOrigin(): NSPoint;
  setScrollOrigin(scrollOrigin: NSPoint): void;
  zoomValue(): CGFloat;
  setZoomValue(zoomValue: CGFloat): void;
  colorSpaceMismatchWarning(): any;
  setColorSpaceMismatchWarning(colorSpaceMismatchWarning: any): void;
  editingLibraryWarning(): any;
  setEditingLibraryWarning(editingLibraryWarning: any): void;
  isCurrent(): boolean;
}
declare const MSDocument: {
  alloc(): MSDocumentUninitialized;
  class(): MSDocument;  currentDocument(): MSDocument;
  windowForSheet(): NSWindow;

}

