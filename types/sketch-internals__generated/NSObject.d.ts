interface NSObjectUninitialized<InitializedType = NSObject> {
  initialize(): InitializedType;
  initWithUnarchiver_migratingFrom_toVersion(unarchiver: MSBaseUnarchiver, fromVersion: NSInteger, toVersion: NSInteger): InitializedType;
  init(): InitializedType;
}

interface NSObject extends INSObject {
  copy(): any;
  mutableCopy(): any;
  methodForSelector(aSelector: string): IMP;
  doesNotRecognizeSelector(aSelector: string): void;
  inverseForRelationshipKey(relationshipKey: NSString | string): NSString;
  attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo(error: NSError, recoveryOptionIndex: NSUInteger, delegate: any | null, didRecoverSelector: string | null, contextInfo: void | null): void;
  attemptRecoveryFromError_optionIndex(error: NSError, recoveryOptionIndex: NSUInteger): boolean;
  fileManager_shouldProceedAfterError(fm: NSFileManager, errorInfo: NSDictionary<any, any> | {[key: string]: any}): boolean;
  fileManager_willProcessPath(fm: NSFileManager, path: NSString | string): void;
  valueForKey(key: NSString | string): any;
  setValue_forKey(value: any | null, key: NSString | string): void;
  validateValue_forKey_error(ioValue: any, inKey: NSString | string, outError: MOPointer<NSError>): boolean;
  mutableArrayValueForKey(key: NSString | string): NSMutableArray<any>;
  mutableOrderedSetValueForKey(key: NSString | string): NSMutableOrderedSet<any>;
  mutableSetValueForKey(key: NSString | string): NSMutableSet<any>;
  valueForKeyPath(keyPath: NSString | string): any;
  setValue_forKeyPath(value: any | null, keyPath: NSString | string): void;
  validateValue_forKeyPath_error(ioValue: any, inKeyPath: NSString | string, outError: MOPointer<NSError>): boolean;
  mutableArrayValueForKeyPath(keyPath: NSString | string): NSMutableArray<any>;
  mutableOrderedSetValueForKeyPath(keyPath: NSString | string): NSMutableOrderedSet<any>;
  mutableSetValueForKeyPath(keyPath: NSString | string): NSMutableSet<any>;
  valueForUndefinedKey(key: NSString | string): any;
  setValue_forUndefinedKey(value: any | null, key: NSString | string): void;
  setNilValueForKey(key: NSString | string): void;
  dictionaryWithValuesForKeys(keys: NSArray<any> | any[]): NSDictionary<any, any>;
  setValuesForKeysWithDictionary(keyedValues: NSDictionary<any, any> | {[key: string]: any}): void;
  storedValueForKey(key: NSString | string): any;
  takeStoredValue_forKey(value: any | null, key: NSString | string): void;
  takeValue_forKey(value: any | null, key: NSString | string): void;
  takeValue_forKeyPath(value: any | null, keyPath: NSString | string): void;
  handleQueryWithUnboundKey(key: NSString | string): any;
  handleTakeValue_forUnboundKey(value: any | null, key: NSString | string): void;
  unableToSetNilForKey(key: NSString | string): void;
  valuesForKeys(keys: NSArray<any> | any[]): NSDictionary<any, any>;
  takeValuesFromDictionary(properties: NSDictionary<any, any> | {[key: string]: any}): void;
  observeValueForKeyPath_ofObject_change_context(keyPath: NSString | string | null, object: any | null, change: NSDictionary<any, any> | {[key: string]: any} | null, context: void | null): void;
  addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString | string, options: NSKeyValueObservingOptions, context: void | null): void;
  removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString | string, context: void | null): void;
  removeObserver_forKeyPath(observer: NSObject, keyPath: NSString | string): void;
  willChangeValueForKey(key: NSString | string): void;
  didChangeValueForKey(key: NSString | string): void;
  willChange_valuesAtIndexes_forKey(changeKind: NSKeyValueChange, indexes: NSIndexSet, key: NSString | string): void;
  didChange_valuesAtIndexes_forKey(changeKind: NSKeyValueChange, indexes: NSIndexSet, key: NSString | string): void;
  willChangeValueForKey_withSetMutation_usingObjects(key: NSString | string, mutationKind: NSKeyValueSetMutationKind, objects: NSSet<any>): void;
  didChangeValueForKey_withSetMutation_usingObjects(key: NSString | string, mutationKind: NSKeyValueSetMutationKind, objects: NSSet<any>): void;
  replacementObjectForKeyedArchiver(archiver: NSKeyedArchiver): any;
  replacementObjectForCoder(aCoder: NSCoder): any;
  awakeAfterUsingCoder_NS_REPLACES_RECEIVER(aDecoder: NSCoder): any;
  scriptingValueForSpecifier(objectSpecifier: NSScriptObjectSpecifier): any;
  copyScriptingValue_forKey_withProperties(value: any, key: NSString | string, properties: NSDictionary<any, any> | {[key: string]: any}): any;
  newScriptingObjectOfClass_forValueForKey_withContentsValue_properties(objectClass: any, key: NSString | string, contentsValue: any | null, properties: NSDictionary<any, any> | {[key: string]: any}): any;
  replacementObjectForPortCoder(coder: NSPortCoder): any;
  performSelector_withObject_afterDelay_inModes(aSelector: string, anArgument: any | null, delay: NSTimeInterval, modes: NSArray<any> | any[]): void;
  performSelector_withObject_afterDelay(aSelector: string, anArgument: any | null, delay: NSTimeInterval): void;
  valueAtIndex_inPropertyWithKey(index: NSUInteger, key: NSString | string): any;
  valueWithName_inPropertyWithKey(name: NSString | string, key: NSString | string): any;
  valueWithUniqueID_inPropertyWithKey(uniqueID: any, key: NSString | string): any;
  insertValue_atIndex_inPropertyWithKey(value: any, index: NSUInteger, key: NSString | string): void;
  removeValueAtIndex_fromPropertyWithKey(index: NSUInteger, key: NSString | string): void;
  replaceValueAtIndex_inPropertyWithKey_withValue(index: NSUInteger, key: NSString | string, value: any): void;
  insertValue_inPropertyWithKey(value: any, key: NSString | string): void;
  coerceValue_forKey(value: any | null, key: NSString | string): any;
  indicesOfObjectsByEvaluatingObjectSpecifier(specifier: NSScriptObjectSpecifier): NSArray<any>;
  isEqualTo(object: any | null): boolean;
  isLessThanOrEqualTo(object: any | null): boolean;
  isLessThan(object: any | null): boolean;
  isGreaterThanOrEqualTo(object: any | null): boolean;
  isGreaterThan(object: any | null): boolean;
  isNotEqualTo(object: any | null): boolean;
  doesContain(object: any): boolean;
  isLike(object: NSString | string): boolean;
  isCaseInsensitiveLike(object: NSString | string): boolean;
  scriptingIsEqualTo(object: any): boolean;
  scriptingIsLessThanOrEqualTo(object: any): boolean;
  scriptingIsLessThan(object: any): boolean;
  scriptingIsGreaterThanOrEqualTo(object: any): boolean;
  scriptingIsGreaterThan(object: any): boolean;
  scriptingBeginsWith(object: any): boolean;
  scriptingEndsWith(object: any): boolean;
  scriptingContains(object: any): boolean;
  performSelectorOnMainThread_withObject_waitUntilDone_modes(aSelector: string, arg: any | null, wait: boolean, array: NSArray<any> | any[] | null): void;
  performSelectorOnMainThread_withObject_waitUntilDone(aSelector: string, arg: any | null, wait: boolean): void;
  performSelector_onThread_withObject_waitUntilDone_modes(aSelector: string, thr: NSThread, arg: any | null, wait: boolean, array: NSArray<any> | any[] | null): void;
  performSelector_onThread_withObject_waitUntilDone(aSelector: string, thr: NSThread, arg: any | null, wait: boolean): void;
  performSelectorInBackground_withObject(aSelector: string, arg: any | null): void;
  URL_resourceDataDidBecomeAvailable(sender: NSURL, newBytes: NSData): void;
  URLResourceDidFinishLoading(sender: NSURL): void;
  URLResourceDidCancelLoading(sender: NSURL): void;
  URL_resourceDidFailLoadingWithReason(sender: NSURL, reason: NSString | string): void;
  accessibilityIsIgnored(): boolean;
  accessibilityHitTest(point: NSPoint): any;
  accessibilityIndexOfChild(child: any): NSUInteger;
  accessibilityArrayAttributeCount(attribute: NSAccessibilityAttributeName): NSUInteger;
  accessibilityArrayAttributeValues_index_maxCount(attribute: NSAccessibilityAttributeName, index: NSUInteger, maxCount: NSUInteger): NSArray<any>;
  application_delegateHandlesKey(sender: NSApplication, key: NSString | string): boolean;
  changeColor(sender: any | null): void;
  controlTextDidBeginEditing(obj: NSNotification): void;
  controlTextDidEndEditing(obj: NSNotification): void;
  controlTextDidChange(obj: NSNotification): void;
  namesOfPromisedFilesDroppedAtDestination(dropDestination: NSURL): NSArray<any>;
  draggingSourceOperationMaskForLocal(flag: boolean): NSDragOperation;
  draggedImage_beganAt(image: NSImage, screenPoint: NSPoint): void;
  draggedImage_endedAt_operation(image: NSImage, screenPoint: NSPoint, operation: NSDragOperation): void;
  draggedImage_movedTo(image: NSImage, screenPoint: NSPoint): void;
  ignoreModifierKeysWhileDragging(): boolean;
  draggedImage_endedAt_deposited_DEPRECATED_IN_MAC_OS_X_VERSION_10_1_AND_LATER(image: NSImage, screenPoint: NSPoint, flag: boolean): void;
  fontManager_willIncludeFont(sender: any, fontName: NSString | string): boolean;
  changeFont(sender: any | null): void;
  validModesForFontPanel(fontPanel: NSFontPanel): NSFontPanelModeMask;
  valueClassForBinding(binding: NSBindingName): any;
  bind_toObject_withKeyPath_options(binding: NSBindingName, observable: any, keyPath: NSString | string, options: NSDictionary<any, any> | {[key: string]: any} | null): void;
  unbind(binding: NSBindingName): void;
  infoForBinding(binding: NSBindingName): NSDictionary<any, any>;
  optionDescriptionsForBinding(binding: NSBindingName): NSArray<any>;
  discardEditing(): void;
  commitEditing(): boolean;
  commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: any | null, didCommitSelector: string | null, contextInfo: void | null): void;
  commitEditingAndReturnError(error: MOPointer<NSError>): boolean;
  objectDidBeginEditing(editor: any): void;
  objectDidEndEditing(editor: any): void;
  validateMenuItem(menuItem: NSMenuItem): boolean;
  awakeFromNib(): void;
  prepareForInterfaceBuilder(): void;
  pasteboard_provideDataForType(sender: NSPasteboard, type: NSPasteboardType): void;
  pasteboardChangedOwner(sender: NSPasteboard): void;
  panel_isValidFilename(sender: any, filename: NSString | string): boolean;
  panel_directoryDidChange(sender: any, path: NSString | string): void;
  panel_compareFilename_with_caseSensitive(sender: any, name1: NSString | string, name2: NSString | string, caseSensitive: boolean): NSComparisonResult;
  panel_shouldShowFilename(sender: any, filename: NSString | string): boolean;
  tableView_writeRows_toPasteboard(tableView: NSTableView, rows: NSArray<any> | any[], pboard: NSPasteboard): boolean;
  textStorageWillProcessEditing(notification: NSNotification): void;
  textStorageDidProcessEditing(notification: NSNotification): void;
  validateToolbarItem(item: NSToolbarItem): boolean;
  layer_shouldInheritContentsScale_fromWindow(layer: CALayer, newScale: CGFloat, window: NSWindow): boolean;
  view_stringForToolTip_point_userData(view: NSView, tag: NSToolTipTag, point: NSPoint, data: void | null): NSString;
  changeKey_inBlock(aKey: NSString | string, block: BCVoidBlock): void;
  executeAsBlock(): void;
  runningOSVersion_bc_minorVersion(majorVersion: NSInteger, minorVersion: NSInteger): boolean;
  runningSierra_bc(): boolean;
  mutableCopyDeep(): any;
  outlineView_shouldShowDisclosureTriangleForItem(outlineView: NSOutlineView, item: any): boolean;
  outlineView_handleKeyEvent(outlineView: NSOutlineView, anEvent: NSEvent): boolean;
  outlineView_deleteItem(outlineView: NSOutlineView, anItem: any): void;
  tableView_handleKeyEvent(tableView: NSTableView, anEvent: NSEvent): boolean;
  tableViewPoofEffect(tv: NSTableView): boolean;
  coderSafeVersion_bc(): NSObject;
  addObserver_forKeyPaths_options_context(anObserver: NSObject, keyPaths: NSArray<any> | any[], options: NSKeyValueObservingOptions, context: void): void;
  removeObserver_forKeyPaths(anObserver: NSObject, keyPaths: NSArray<any> | any[]): void;
  setCOSJSTargetFunction(jsFunction: MOJavaScriptObject | Function): void;
  coscript_hadError_onLineNumber_atSourceURL(coscript: any, error: NSString | string, lineNumber: NSInteger, url: any): void;
  finalizeForMochaScript(): void;
  objectForIndexedSubscript(idx: NSUInteger): any;
  setObject_forIndexedSubscript(obj: any, idx: NSUInteger): void;
  //   objectForKeyedSubscript(key: NSString | string): any;
  //   setObject_forKeyedSubscript(obj: any, key: NSString | string): void;
  shutdown(): void;
  JSValueForObject(object: any): JSValueRef;
  JSValueForObject_shouldCreateBox(object: any, shouldCreateBox: boolean): JSValueRef;
  encodeWithArchiver(archiver: MSBaseArchiver): void;
  copyWithOptions(options: MSModelCopyOptions): any;
  hasDefaultValues(): boolean;
  propertiesAreEqual_forPurpose(object: any, purpose: MSModelComparisonPurpose): boolean;
  parentObject(): any;
  setParentObject(parentObject: MSModelObjectCommon): void;
  breakConnectionWith(parent: MSModelObjectCommon): void;
  mapTreeWithLeafTransformBlock(block: Block): any;
  safeCastToClass(classToCastTo: any): any;

  classForArchiver(): any;
  classDescription(): NSClassDescription;
  attributeKeys(): NSArray<any>;
  toOneRelationshipKeys(): NSArray<any>;
  toManyRelationshipKeys(): NSArray<any>;
  observationInfo(): void;
  setObservationInfo(observationInfo: void): void;
  classForKeyedArchiver(): any;
  classForCoder(): any;
  autoContentAccessingProxy(): any;
  scriptingProperties(): NSDictionary<any, any>;
  setScriptingProperties(scriptingProperties: NSDictionary<any, any> | {[key: string]: any}): void;
  classForPortCoder(): any;
  classCode(): number;
  className(): NSString;
  objectSpecifier(): NSScriptObjectSpecifier;
  accessibilityFocusedUIElement(): any;
  accessibilityNotifiesWhenDestroyed(): boolean;
  exposedBindings(): NSArray<any>;
  BCCache_selfOrDeferredObject(): NSObject;
  BCCache_unblockingSelfOrDeferredObject(): NSObject;
  immutableModelObject(): any;
}

declare const NSObject: {
  alloc(): NSObjectUninitialized;
  class(): NSObject;
  load(): void;
  instancesRespondToSelector(aSelector: string): boolean;
  conformsToProtocol(protocol: Protocol): boolean;
  instanceMethodForSelector(aSelector: string): IMP;
  isSubclassOfClass(aClass: any): boolean;
  hash(): NSUInteger;
  superclass(): any;
  description(): NSString;
  debugDescription(): NSString;
  useStoredAccessor(): boolean;
  keyPathsForValuesAffectingValueForKey(key: NSString | string): NSSet<any>;
  automaticallyNotifiesObserversForKey(key: NSString | string): boolean;
  setKeys_triggerChangeNotificationsForDependentKey(keys: NSArray<any> | any[], dependentKey: NSString | string): void;
  classFallbacksForKeyedArchiver(): NSArray<any>;
  classForKeyedUnarchiver(): any;
  version(): NSInteger;
  setVersion(aVersion: NSInteger): void;
  cancelPreviousPerformRequestsWithTarget_selector_object(aTarget: any, aSelector: string, anArgument: any | null): void;
  cancelPreviousPerformRequestsWithTarget(aTarget: any): void;
  exposeBinding(binding: NSBindingName): void;
  setDefaultPlaceholder_forMarker_withBinding(placeholder: any | null, marker: any | null, binding: NSBindingName): void;
  defaultPlaceholderForMarker_withBinding(marker: any | null, binding: NSBindingName): any;
  mo_swizzleAdditions(): void;
  mo_mocha(): MOClassDescription;
  isSelectorExcludedFromMochaScript(selector: string): boolean;
  selectorForMochaPropertyName(propertyName: NSString | string): string;
  accessInstanceVariablesDirectly(): boolean;

}

