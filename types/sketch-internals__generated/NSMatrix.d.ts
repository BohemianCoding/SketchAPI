interface NSMatrixUninitialized<InitializedType = NSMatrix> extends NSControlUninitialized<NSMatrix> {
  initWithFrame_mode_prototype_numberOfRows_numberOfColumns(frameRect: NSRect, mode: NSMatrixMode, cell: NSCell, rowsHigh: NSInteger, colsWide: NSInteger): InitializedType;
  initWithFrame_mode_cellClass_numberOfRows_numberOfColumns(frameRect: NSRect, mode: NSMatrixMode, factoryId: any | null, rowsHigh: NSInteger, colsWide: NSInteger): InitializedType;
}

interface NSMatrix extends NSControl, INSUserInterfaceValidations, INSViewToolTipOwner {
  makeCellAtRow_column(row: NSInteger, col: NSInteger): NSCell;
  sendAction_to_forAllCells(selector: string, object: any, flag: boolean): void;
  sortUsingSelector(comparator: string): void;
  setSelectionFrom_to_anchor_highlight(startPos: NSInteger, endPos: NSInteger, anchorPos: NSInteger, lit: boolean): void;
  deselectSelectedCell(): void;
  deselectAllCells(): void;
  selectCellAtRow_column(row: NSInteger, col: NSInteger): void;
  selectAll(sender: any | null): void;
  selectCellWithTag(tag: NSInteger): boolean;
  setScrollable(flag: boolean): void;
  setState_atRow_column(value: NSInteger, row: NSInteger, col: NSInteger): void;
  getNumberOfRows_columns(rowCount: NSInteger | null, colCount: NSInteger | null): void;
  cellAtRow_column(row: NSInteger, col: NSInteger): NSCell;
  cellFrameAtRow_column(row: NSInteger, col: NSInteger): NSRect;
  getRow_column_ofCell(row: NSInteger, col: NSInteger, cell: NSCell): boolean;
  getRow_column_forPoint(row: NSInteger, col: NSInteger, point: NSPoint): boolean;
  renewRows_columns(newRows: NSInteger, newCols: NSInteger): void;
  putCell_atRow_column(newCell: NSCell, row: NSInteger, col: NSInteger): void;
  addRow(): void;
  addRowWithCells(newCells: NSArray<any> | any[]): void;
  insertRow(row: NSInteger): void;
  insertRow_withCells(row: NSInteger, newCells: NSArray<any> | any[] | null): void;
  removeRow(row: NSInteger): void;
  addColumn(): void;
  addColumnWithCells(newCells: NSArray<any> | any[]): void;
  insertColumn(column: NSInteger): void;
  insertColumn_withCells(column: NSInteger, newCells: NSArray<any> | any[] | null): void;
  removeColumn(col: NSInteger): void;
  cellWithTag(tag: NSInteger): NSCell;
  sizeToCells(): void;
  setValidateSize(flag: boolean): void;
  drawCellAtRow_column(row: NSInteger, col: NSInteger): void;
  highlightCell_atRow_column(flag: boolean, row: NSInteger, col: NSInteger): void;
  scrollCellToVisibleAtRow_column(row: NSInteger, col: NSInteger): void;
  mouseDown(event: NSEvent): void;
  performKeyEquivalent(event: NSEvent): boolean;
  sendAction(): boolean;
  sendDoubleAction(): void;
  textShouldBeginEditing(textObject: NSText): boolean;
  textShouldEndEditing(textObject: NSText): boolean;
  textDidBeginEditing(notification: NSNotification): void;
  textDidEndEditing(notification: NSNotification): void;
  textDidChange(notification: NSNotification): void;
  selectText(sender: any | null): void;
  selectTextAtRow_column(row: NSInteger, col: NSInteger): NSCell;
  acceptsFirstMouse(event: NSEvent | null): boolean;
  resetCursorRects(): void;
  setToolTip_forCell(toolTipString: NSString | string | null, cell: NSCell): void;
  toolTipForCell(cell: NSCell): NSString;
  validateUserInterfaceItem(item: any): boolean;
  view_stringForToolTip_point_userData(view: NSView, tag: NSToolTipTag, point: NSPoint, data: void | null): NSString;

  cellClass(): any;
  setCellClass(cellClass: any): void;
  prototype(): NSCell;
  setPrototype(prototype: NSCell): void;
  mode(): NSMatrixMode;
  setMode(mode: NSMatrixMode): void;
  allowsEmptySelection(): boolean;
  setAllowsEmptySelection(allowsEmptySelection: boolean): void;
  cells(): NSArray<any>;
  selectedCell(): NSCell;
  selectedCells(): NSArray<any>;
  selectedRow(): NSInteger;
  selectedColumn(): NSInteger;
  selectionByRect(): boolean;
  setSelectionByRect(selectionByRect: boolean): void;
  cellSize(): NSSize;
  setCellSize(cellSize: NSSize): void;
  intercellSpacing(): NSSize;
  setIntercellSpacing(intercellSpacing: NSSize): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  cellBackgroundColor(): NSColor;
  setCellBackgroundColor(cellBackgroundColor: NSColor): void;
  drawsCellBackground(): boolean;
  setDrawsCellBackground(drawsCellBackground: boolean): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  numberOfRows(): NSInteger;
  numberOfColumns(): NSInteger;
  doubleAction(): string;
  setDoubleAction(doubleAction: string): void;
  autosizesCells(): boolean;
  setAutosizesCells(autosizesCells: boolean): void;
  autoscroll(): boolean;
  setAutoscroll(autoscroll: boolean): void;
  mouseDownFlags(): NSInteger;
  delegate(): any;
  setDelegate(delegate: any): void;
  autorecalculatesCellSize(): boolean;
  setAutorecalculatesCellSize(autorecalculatesCellSize: boolean): void;
  tabKeyTraversesCells(): boolean;
  setTabKeyTraversesCells(tabKeyTraversesCells: boolean): void;
  keyCell(): NSCell;
  setKeyCell(keyCell: NSCell): void;
}

declare const NSMatrix: {
  alloc(): NSMatrixUninitialized;
  class(): NSMatrix;
  inpectorBorderPathForRect(rect: NSRect): NSBezierPath;
  inpectorCheckmarkBorderPathForRect(rect: NSRect): NSBezierPath;
  inpectorBorderPathForRectWithMaxRadius(rect: NSRect): NSBezierPath;
  inpectorBorderPathForRect_borderRadius(rect: NSRect, borderRadius: CGFloat): NSBezierPath;
  inpectorFocusRingPathForRect(rect: NSRect): NSBezierPath;
  requiresConstraintBasedLayout(): boolean;
  focusView(): NSView;
  defaultMenu(): NSMenu;
  compatibleWithResponsiveScrolling(): boolean;
  defaultFocusRingType(): NSFocusRingType;
  restorableStateKeyPaths(): NSArray<any>;

}

