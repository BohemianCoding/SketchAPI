interface AppControllerUninitialized<InitializedType = AppController> extends NSObjectUninitialized<AppController> {}

interface AppController extends NSObject, INSApplicationDelegate, INSWindowDelegate, INSMenuDelegate, INSUserNotificationCenterDelegate, IMSDataSupplierManagerDelegate {
  actionClasses(): NSArray<any>;
  runPluginCommandWithIdentifier_fromBundleAtURL_context(identifier: NSString | string, url: NSURL, context: NSDictionary<any, any> | {[key: string]: any}): NSString;
  runPluginCommandWithIdentifier_fromBundleAtURL_context_portToAsnwerTo(identifier: NSString | string, url: NSURL, context: NSDictionary<any, any> | {[key: string]: any}, port: NSString | string): NSString;
  revealPlugin(sender: any): IBAction;
  buildPluginsMenu(menu: NSMenu): void;
  runPluginCommand_fromMenu_context(command: MSPluginCommand, fromMenu: boolean, context: NSDictionary<any, any> | {[key: string]: any}): NSString;
  runPluginCommand_fromMenu_context_onComplete(command: MSPluginCommand, fromMenu: boolean, context: NSDictionary<any, any> | {[key: string]: any}, callback: Block): NSString;
  runPluginScript_name(script: NSString | string, name: NSString | string): NSString;
  runPluginScript_handler_name_withPreprocess(script: NSString | string, handler: NSString | string, name: NSString | string, shoulPreprocess: boolean): NSString;
  validatePluginMenuItem_documentShowing(menuItem: NSMenuItem, documentShowing: boolean): boolean;
  registerURLScheme(): void;
  checkDefaults(): void;
  openPreferencesWindowWithPreferencePaneIdentifier(identifier: NSString | string): void;
  openAboutWindow(sender: any): IBAction;
  revealTemplatesFolderInFinder(sender: any): IBAction;
  buy(sender: any): IBAction;
  refreshCurrentDocument(): void;
  currentDocumentDidChange(): void;
  refreshDocumentWindowBadges(): void;
  openTemplateAtPath(templateURL: NSURL): void;
  templateLibraryPath(): NSURL;
  toggleDarkMode(sender: any): IBAction;
  applicationShouldTerminate(sender: NSApplication): NSApplicationTerminateReply;
  application_openURLs(application: NSApplication, urls: NSArray<any> | any[]): void;
  application_openFile(sender: NSApplication, filename: NSString | string): boolean;
  application_openFiles(sender: NSApplication, filenames: NSArray<any> | any[]): void;
  application_openTempFile(sender: NSApplication, filename: NSString | string): boolean;
  applicationShouldOpenUntitledFile(sender: NSApplication): boolean;
  applicationOpenUntitledFile(sender: NSApplication): boolean;
  application_openFileWithoutUI(sender: any, filename: NSString | string): boolean;
  application_printFile(sender: NSApplication, filename: NSString | string): boolean;
  application_printFiles_withSettings_showPrintPanels(application: NSApplication, fileNames: NSArray<any> | any[], printSettings: NSDictionary<any, any> | {[key: string]: any}, showPrintPanels: boolean): NSApplicationPrintReply;
  applicationShouldTerminateAfterLastWindowClosed(sender: NSApplication): boolean;
  applicationShouldHandleReopen_hasVisibleWindows(sender: NSApplication, flag: boolean): boolean;
  applicationDockMenu(sender: NSApplication): NSMenu;
  application_willPresentError(application: NSApplication, error: NSError): NSError;
  application_didRegisterForRemoteNotificationsWithDeviceToken(application: NSApplication, deviceToken: NSData): void;
  application_didFailToRegisterForRemoteNotificationsWithError(application: NSApplication, error: NSError): void;
  application_didReceiveRemoteNotification(application: NSApplication, userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  application_willEncodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_didDecodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_willContinueUserActivityWithType(application: NSApplication, userActivityType: NSString | string): boolean;
  application_continueUserActivity_restorationHandler(application: NSApplication, userActivity: NSUserActivity, restorationHandler: Block): boolean;
  application_didFailToContinueUserActivityWithType_error(application: NSApplication, userActivityType: NSString | string, error: NSError): void;
  application_didUpdateUserActivity(application: NSApplication, userActivity: NSUserActivity): void;
  application_userDidAcceptCloudKitShareWithMetadata(application: NSApplication, metadata: CKShareMetadata): void;
  application_delegateHandlesKey(sender: NSApplication, key: NSString | string): boolean;
  applicationWillFinishLaunching(notification: NSNotification): void;
  applicationDidFinishLaunching(notification: NSNotification): void;
  applicationWillHide(notification: NSNotification): void;
  applicationDidHide(notification: NSNotification): void;
  applicationWillUnhide(notification: NSNotification): void;
  applicationDidUnhide(notification: NSNotification): void;
  applicationWillBecomeActive(notification: NSNotification): void;
  applicationDidBecomeActive(notification: NSNotification): void;
  applicationWillResignActive(notification: NSNotification): void;
  applicationDidResignActive(notification: NSNotification): void;
  applicationWillUpdate(notification: NSNotification): void;
  applicationDidUpdate(notification: NSNotification): void;
  applicationWillTerminate(notification: NSNotification): void;
  applicationDidChangeScreenParameters(notification: NSNotification): void;
  applicationDidChangeOcclusionState(notification: NSNotification): void;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
  userNotificationCenter_didDeliverNotification(center: NSUserNotificationCenter, notification: NSUserNotification): void;
  userNotificationCenter_didActivateNotification(center: NSUserNotificationCenter, notification: NSUserNotification): void;
  userNotificationCenter_shouldPresentNotification(center: NSUserNotificationCenter, notification: NSUserNotification): boolean;
  requestDataFromPluginDataSupplier_pluginContext(pluginDataSupplier: MSPluginDataSupplier, pluginContext: NSDictionary<any, any> | {[key: string]: any}): void;
  isThereAPluginForDataSupplier(pluginDataSupplier: MSPluginDataSupplier): boolean;
  pluginIconForIdentifier(pluginIdentifier: NSString | string): NSImage;
  pluginNameForIdentifier(pluginIdentifier: NSString | string): NSString;

  lastRun(): MSPluginCommand;
  shapesMenu(): any;
  setShapesMenu(shapesMenu: any): void;
  pluginsMenuItem(): NSMenuItem;
  setPluginsMenuItem(pluginsMenuItem: NSMenuItem): void;
  templatesMenu(): NSMenu;
  setTemplatesMenu(templatesMenu: NSMenu): void;
  printMenu(): NSMenu;
  setPrintMenu(printMenu: NSMenu): void;
  prototypingMenuItem(): NSMenuItem;
  setPrototypingMenuItem(prototypingMenuItem: NSMenuItem): void;
  debugMenuItem(): NSMenuItem;
  setDebugMenuItem(debugMenuItem: NSMenuItem): void;
  cloudEnvironmentMenuItem(): NSMenuItem;
  setCloudEnvironmentMenuItem(cloudEnvironmentMenuItem: NSMenuItem): void;
  updateTimer(): NSTimer;
  setUpdateTimer(updateTimer: NSTimer): void;
  pasteboardManager(): MSPasteboardManager;
  setPasteboardManager(pasteboardManager: MSPasteboardManager): void;
  mirrorController(): SMKMirrorController;
  setMirrorController(mirrorController: SMKMirrorController): void;
  mirrorDataProvider(): MSMirrorDataProvider;
  setMirrorDataProvider(mirrorDataProvider: MSMirrorDataProvider): void;
  dataSupplierManager(): MSDataSupplierManager;
  crashLogManager(): MSCrashLogManager;
  pluginManager(): MSPluginManagerWithActions;
  licenseManager(): BCLicenseManager;
  updateController(): MSUpdateController;
  actionController(): MSActionController;
  librariesController(): MSAssetLibraryController;
  hud(): MSHUDWindowController;
  creationTime(): NSTimeInterval;
  launchStartTime(): NSTimeInterval;
  launchEndTime(): NSTimeInterval;
  sketchSafeModeOn(): boolean;
  needToInformUserPluginsAreDisabled(): boolean;
  setNeedToInformUserPluginsAreDisabled(needToInformUserPluginsAreDisabled: boolean): void;
  canShowWelcomeWindowForUserAction(): boolean;
  canCreateDocuments(): boolean;
  setCanCreateDocuments(canCreateDocuments: boolean): void;
}

declare const AppController: {
  alloc(): AppControllerUninitialized;
  class(): AppController;
  sharedInstance(): AppController;
  load(): void;
  instancesRespondToSelector(aSelector: string): boolean;
  conformsToProtocol(protocol: Protocol): boolean;
  instanceMethodForSelector(aSelector: string): IMP;
  isSubclassOfClass(aClass: any): boolean;
  hash(): NSUInteger;
  superclass(): any;
  description(): NSString;
  debugDescription(): NSString;
  useStoredAccessor(): boolean;
  keyPathsForValuesAffectingValueForKey(key: NSString | string): NSSet<any>;
  automaticallyNotifiesObserversForKey(key: NSString | string): boolean;
  setKeys_triggerChangeNotificationsForDependentKey(keys: NSArray<any> | any[], dependentKey: NSString | string): void;
  classFallbacksForKeyedArchiver(): NSArray<any>;
  classForKeyedUnarchiver(): any;
  version(): NSInteger;
  setVersion(aVersion: NSInteger): void;
  cancelPreviousPerformRequestsWithTarget_selector_object(aTarget: any, aSelector: string, anArgument: any | null): void;
  cancelPreviousPerformRequestsWithTarget(aTarget: any): void;
  exposeBinding(binding: NSBindingName): void;
  setDefaultPlaceholder_forMarker_withBinding(placeholder: any | null, marker: any | null, binding: NSBindingName): void;
  defaultPlaceholderForMarker_withBinding(marker: any | null, binding: NSBindingName): any;
  mo_swizzleAdditions(): void;
  mo_mocha(): MOClassDescription;
  isSelectorExcludedFromMochaScript(selector: string): boolean;
  selectorForMochaPropertyName(propertyName: NSString | string): string;
  accessInstanceVariablesDirectly(): boolean;

}

