interface NSCellUninitialized<InitializedType = NSCell> extends NSObjectUninitialized<NSCell> {
  init(): InitializedType;
  initTextCell(string: NSString | string): InitializedType;
  initImageCell(image: NSImage | null): InitializedType;
  initWithCoder(coder: NSCoder): InitializedType;
}
interface NSCell extends NSObject, INSCopying, INSCoding, INSUserInterfaceItemIdentification, INSAccessibilityElement, INSAccessibility {
  sendActionOn(mask: NSInteger): NSInteger;
  compare(otherCell: any): NSComparisonResult;
  takeIntValueFrom(sender: any | null): void;
  takeFloatValueFrom(sender: any | null): void;
  takeDoubleValueFrom(sender: any | null): void;
  takeStringValueFrom(sender: any | null): void;
  takeObjectValueFrom(sender: any | null): void;
  cellAttribute(parameter: NSCellAttribute): NSInteger;
  setCellAttribute_to(parameter: NSCellAttribute, value: NSInteger): void;
  imageRectForBounds(rect: NSRect): NSRect;
  titleRectForBounds(rect: NSRect): NSRect;
  drawingRectForBounds(rect: NSRect): NSRect;
  cellSizeForBounds(rect: NSRect): NSSize;
  highlightColorWithFrame_inView(cellFrame: NSRect, controlView: NSView): NSColor;
  calcDrawInfo(rect: NSRect): void;
  setUpFieldEditorAttributes(textObj: NSText): NSText;
  drawInteriorWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  drawWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  highlight_withFrame_inView(flag: boolean, cellFrame: NSRect, controlView: NSView): void;
  getPeriodicDelay_interval(delay: number, interval: number): void;
  startTrackingAt_inView(startPoint: NSPoint, controlView: NSView): boolean;
  continueTracking_at_inView(lastPoint: NSPoint, currentPoint: NSPoint, controlView: NSView): boolean;
  stopTracking_at_inView_mouseIsUp(lastPoint: NSPoint, stopPoint: NSPoint, controlView: NSView, flag: boolean): void;
  trackMouse_inRect_ofView_untilMouseUp(event: NSEvent, cellFrame: NSRect, controlView: NSView, flag: boolean): boolean;
  editWithFrame_inView_editor_delegate_event(rect: NSRect, controlView: NSView, textObj: NSText, delegate: any | null, event: NSEvent | null): void;
  selectWithFrame_inView_editor_delegate_start_length(rect: NSRect, controlView: NSView, textObj: NSText, delegate: any | null, selStart: NSInteger, selLength: NSInteger): void;
  endEditing(textObj: NSText): void;
  resetCursorRect_inView(cellFrame: NSRect, controlView: NSView): void;
  menuForEvent_inRect_ofView(event: NSEvent, cellFrame: NSRect, view: NSView): NSMenu;
  takeIntegerValueFrom(sender: any | null): void;
  fieldEditorForView(controlView: NSView): NSTextView;
  draggingImageComponentsWithFrame_inView(frame: NSRect, view: NSView): NSArray<any>;
  performClick(sender: any | null): void;
  drawFocusRingMaskWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  focusRingMaskBoundsForFrame_inView(cellFrame: NSRect, controlView: NSView): NSRect;
  setNextState(): void;
  hitTestForEvent_inRect_ofView(event: NSEvent, cellFrame: NSRect, controlView: NSView): NSCellHitResult;
  expansionFrameWithFrame_inView(cellFrame: NSRect, view: NSView): NSRect;
  drawWithExpansionFrame_inView(cellFrame: NSRect, view: NSView): void;
  entryType(): NSInteger;
  setEntryType(type: NSInteger): void;
  isEntryAcceptable(string: NSString | string): boolean;
  setFloatingPointFormat_left_right(autoRange: boolean, leftDigits: NSUInteger, rightDigits: NSUInteger): void;
  setMnemonicLocation(location: NSUInteger): void;
  mnemonicLocation(): NSUInteger;
  mnemonic(): NSString;
  setTitleWithMnemonic(stringWithAmpersand: NSString | string): void;
  inheritedBackgroundStyle(): NSBackgroundStyle;
  currentInspectorIconColor(): NSColor;
  currentInspectorAccentedIconColor(): NSColor;
  currentInspectorAccentColor(): NSColor;
  drawInspectorButtonImage_centeredInRect(image: NSImage, rect: NSRect): void;
  drawInspectorButtonImage_centeredInRect_accented(image: NSImage, rect: NSRect, accented: boolean): void;
  drawInspectorButtonImage_centeredInRect_accented_accentsImage(image: NSImage, rect: NSRect, accented: boolean, accentsImage: boolean): void;
  drawInspectorStatelessControlImage_centeredInRect(image: NSImage, rect: NSRect): void;
  drawInspectorButtonPath_accented_highlighted(path: NSBezierPath, accented: boolean, highlighted: boolean): void;
  drawInspectorTextFieldBackgroundWithPath(path: NSBezierPath): void;
  drawInspectorFocusRingMaskWithWithPath(path: NSBezierPath): void;
  inspectorFocusRingMaskBoundsForFrame_inView(cellFrame: NSRect, controlView: NSView): NSRect;

  controlView(): NSView;
  setControlView(controlView: NSView): void;
  type(): NSCellType;
  setType(type: NSCellType): void;
  state(): NSControlStateValue;
  setState(state: NSControlStateValue): void;
  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  tag(): NSInteger;
  setTag(tag: NSInteger): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  opaque(): boolean;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  continuous(): boolean;
  setContinuous(continuous: boolean): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  selectable(): boolean;
  setSelectable(selectable: boolean): void;
  bordered(): boolean;
  setBordered(bordered: boolean): void;
  bezeled(): boolean;
  setBezeled(bezeled: boolean): void;
  scrollable(): boolean;
  setScrollable(scrollable: boolean): void;
  highlighted(): boolean;
  setHighlighted(highlighted: boolean): void;
  alignment(): NSTextAlignment;
  setAlignment(alignment: NSTextAlignment): void;
  wraps(): boolean;
  setWraps(wraps: boolean): void;
  font(): NSFont;
  setFont(font: NSFont): void;
  keyEquivalent(): NSString;
  formatter(): NSFormatter;
  setFormatter(formatter: NSFormatter): void;
  objectValue(): any;
  setObjectValue(objectValue: any): void;
  hasValidObjectValue(): boolean;
  stringValue(): NSString;
  setStringValue(stringValue: NSString | string): void;
  intValue(): number;
  setIntValue(intValue: number): void;
  floatValue(): number;
  setFloatValue(floatValue: number): void;
  doubleValue(): number;
  setDoubleValue(doubleValue: number): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  controlSize(): NSControlSize;
  setControlSize(controlSize: NSControlSize): void;
  representedObject(): any;
  setRepresentedObject(representedObject: any): void;
  cellSize(): NSSize;
  mouseDownFlags(): NSInteger;
  menu(): NSMenu;
  setMenu(menu: NSMenu): void;
  sendsActionOnEndEditing(): boolean;
  setSendsActionOnEndEditing(sendsActionOnEndEditing: boolean): void;
  baseWritingDirection(): NSWritingDirection;
  setBaseWritingDirection(baseWritingDirection: NSWritingDirection): void;
  lineBreakMode(): NSLineBreakMode;
  setLineBreakMode(lineBreakMode: NSLineBreakMode): void;
  allowsUndo(): boolean;
  setAllowsUndo(allowsUndo: boolean): void;
  integerValue(): NSInteger;
  setIntegerValue(integerValue: NSInteger): void;
  truncatesLastVisibleLine(): boolean;
  setTruncatesLastVisibleLine(truncatesLastVisibleLine: boolean): void;
  userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
  setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection): void;
  usesSingleLineMode(): boolean;
  setUsesSingleLineMode(usesSingleLineMode: boolean): void;
  refusesFirstResponder(): boolean;
  setRefusesFirstResponder(refusesFirstResponder: boolean): void;
  acceptsFirstResponder(): boolean;
  showsFirstResponder(): boolean;
  setShowsFirstResponder(showsFirstResponder: boolean): void;
  focusRingType(): NSFocusRingType;
  setFocusRingType(focusRingType: NSFocusRingType): void;
  wantsNotificationForMarkedText(): boolean;
  attributedStringValue(): NSAttributedString;
  setAttributedStringValue(attributedStringValue: NSAttributedString): void;
  allowsEditingTextAttributes(): boolean;
  setAllowsEditingTextAttributes(allowsEditingTextAttributes: boolean): void;
  importsGraphics(): boolean;
  setImportsGraphics(importsGraphics: boolean): void;
  allowsMixedState(): boolean;
  setAllowsMixedState(allowsMixedState: boolean): void;
  nextState(): NSInteger;
  backgroundStyle(): NSBackgroundStyle;
  setBackgroundStyle(backgroundStyle: NSBackgroundStyle): void;
  interiorBackgroundStyle(): NSBackgroundStyle;
  controlTint(): NSControlTint;
  setControlTint(controlTint: NSControlTint): void;
}
declare const NSCell: {
  alloc(): NSCellUninitialized;
  class(): NSCell;  drawBaselineAlignedAttributedTitle_forCell_controlView(attributedTitle: NSAttributedString, cell: NSCell, controlView: NSView): NSRect;
  inspectorIconColorForCellEnabled_highlighted(enabled: boolean, highlighted: boolean): NSColor;
  inspectorAccentColorForCellHighlighted(highlighted: boolean): NSColor;
  drawInspectorButtonImage_centeredInRect_withColor(image: NSImage, rect: NSRect, color: NSColor): void;

  prefersTrackingUntilMouseUp(): boolean;
  defaultMenu(): NSMenu;
  defaultFocusRingType(): NSFocusRingType;

}

